/**
 * Kafka Management API
 * Kafka Management API is a REST API to manage Kafka instances
 *
 * The version of the OpenAPI document: 1.15.0
 * Contact: rhosak-support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ServiceAccount } from '../model';
import { ServiceAccountList } from '../model';
import { ServiceAccountRequest } from '../model';
import { SsoProvider } from '../model';
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export declare const SecurityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a service account
     * @param {ServiceAccountRequest} serviceAccountRequest Service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createServiceAccount: (serviceAccountRequest: ServiceAccountRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceAccountById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returned service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccountById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of service accounts
     * @param {string} [clientId] client_id of the service account to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccounts: (clientId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return sso provider info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSsoProviders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resets the credentials for a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServiceAccountCreds: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SecurityApi - functional programming interface
 * @export
 */
export declare const SecurityApiFp: (configuration?: Configuration) => {
    /**
     * Creates a service account
     * @param {ServiceAccountRequest} serviceAccountRequest Service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>>;
    /**
     * Deletes a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceAccountById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>>;
    /**
     * Returned service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccountById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>>;
    /**
     * Returns a list of service accounts
     * @param {string} [clientId] client_id of the service account to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccounts(clientId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>>;
    /**
     * Return sso provider info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSsoProviders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SsoProvider>>;
    /**
     * Resets the credentials for a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServiceAccountCreds(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>>;
};
/**
 * SecurityApi - factory interface
 * @export
 */
export declare const SecurityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a service account
     * @param {ServiceAccountRequest} serviceAccountRequest Service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;
    /**
     * Deletes a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceAccountById(id: string, options?: any): AxiosPromise<Error>;
    /**
     * Returned service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;
    /**
     * Returns a list of service accounts
     * @param {string} [clientId] client_id of the service account to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccounts(clientId?: string, options?: any): AxiosPromise<ServiceAccountList>;
    /**
     * Return sso provider info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSsoProviders(options?: any): AxiosPromise<SsoProvider>;
    /**
     * Resets the credentials for a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;
};
/**
 * SecurityApi - interface
 * @export
 * @interface SecurityApi
 */
export interface SecurityApiInterface {
    /**
     * Creates a service account
     * @param {ServiceAccountRequest} serviceAccountRequest Service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccount>;
    /**
     * Deletes a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    deleteServiceAccountById(id: string, options?: AxiosRequestConfig): AxiosPromise<Error>;
    /**
     * Returned service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getServiceAccountById(id: string, options?: AxiosRequestConfig): AxiosPromise<ServiceAccount>;
    /**
     * Returns a list of service accounts
     * @param {string} [clientId] client_id of the service account to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getServiceAccounts(clientId?: string, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountList>;
    /**
     * Return sso provider info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getSsoProviders(options?: AxiosRequestConfig): AxiosPromise<SsoProvider>;
    /**
     * Resets the credentials for a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    resetServiceAccountCreds(id: string, options?: AxiosRequestConfig): AxiosPromise<ServiceAccount>;
}
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export declare class SecurityApi extends BaseAPI implements SecurityApiInterface {
    /**
     * Creates a service account
     * @param {ServiceAccountRequest} serviceAccountRequest Service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccount, any>>;
    /**
     * Deletes a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    deleteServiceAccountById(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Error, any>>;
    /**
     * Returned service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getServiceAccountById(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccount, any>>;
    /**
     * Returns a list of service accounts
     * @param {string} [clientId] client_id of the service account to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getServiceAccounts(clientId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../model").ServiceAccountListAllOf, any>>;
    /**
     * Return sso provider info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getSsoProviders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SsoProvider, any>>;
    /**
     * Resets the credentials for a service account by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    resetServiceAccountCreds(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccount, any>>;
}
