/**
 * sso.redhat.com API documentation
 * This is the API documentation for sso.redhat.com
 *
 * The version of the OpenAPI document: 5.0.19-SNAPSHOT
 * Contact: it-user-team-list@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ServiceAccountCreateRequestData } from '../model';
import { ServiceAccountData } from '../model';
import { ServiceAccountRequestData } from '../model';
/**
 * ServiceAccountsApi - axios parameter creator
 * @export
 */
export declare const ServiceAccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a service account. Created service account is associated with the user defined in the bearer token.
     * @summary Create service account
     * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createServiceAccount: (serviceAccountCreateRequestData: ServiceAccountCreateRequestData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Delete service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceAccount: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Get service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccount: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
     * @summary List all service accounts
     * @param {number} [first]
     * @param {number} [max]
     * @param {Set<string>} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccounts: (first?: number, max?: number, clientId?: Set<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Reset service account secret by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServiceAccountSecret: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a service account by id.
     * @summary Update service account
     * @param {string} id
     * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateServiceAccount: (id: string, serviceAccountRequestData: ServiceAccountRequestData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServiceAccountsApi - functional programming interface
 * @export
 */
export declare const ServiceAccountsApiFp: (configuration?: Configuration) => {
    /**
     * Create a service account. Created service account is associated with the user defined in the bearer token.
     * @summary Create service account
     * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createServiceAccount(serviceAccountCreateRequestData: ServiceAccountCreateRequestData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountData>>;
    /**
     * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Delete service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceAccount(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Get service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccount(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountData>>;
    /**
     * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
     * @summary List all service accounts
     * @param {number} [first]
     * @param {number} [max]
     * @param {Set<string>} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccounts(first?: number, max?: number, clientId?: Set<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceAccountData>>>;
    /**
     * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Reset service account secret by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServiceAccountSecret(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountData>>;
    /**
     * Update a service account by id.
     * @summary Update service account
     * @param {string} id
     * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateServiceAccount(id: string, serviceAccountRequestData: ServiceAccountRequestData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountData>>;
};
/**
 * ServiceAccountsApi - factory interface
 * @export
 */
export declare const ServiceAccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a service account. Created service account is associated with the user defined in the bearer token.
     * @summary Create service account
     * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createServiceAccount(serviceAccountCreateRequestData: ServiceAccountCreateRequestData, options?: any): AxiosPromise<ServiceAccountData>;
    /**
     * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Delete service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceAccount(id: string, options?: any): AxiosPromise<void>;
    /**
     * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Get service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccount(id: string, options?: any): AxiosPromise<ServiceAccountData>;
    /**
     * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
     * @summary List all service accounts
     * @param {number} [first]
     * @param {number} [max]
     * @param {Set<string>} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceAccounts(first?: number, max?: number, clientId?: Set<string>, options?: any): AxiosPromise<Array<ServiceAccountData>>;
    /**
     * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Reset service account secret by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServiceAccountSecret(id: string, options?: any): AxiosPromise<ServiceAccountData>;
    /**
     * Update a service account by id.
     * @summary Update service account
     * @param {string} id
     * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateServiceAccount(id: string, serviceAccountRequestData: ServiceAccountRequestData, options?: any): AxiosPromise<ServiceAccountData>;
};
/**
 * ServiceAccountsApi - interface
 * @export
 * @interface ServiceAccountsApi
 */
export interface ServiceAccountsApiInterface {
    /**
     * Create a service account. Created service account is associated with the user defined in the bearer token.
     * @summary Create service account
     * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiInterface
     */
    createServiceAccount(serviceAccountCreateRequestData: ServiceAccountCreateRequestData, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountData>;
    /**
     * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Delete service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiInterface
     */
    deleteServiceAccount(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Get service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiInterface
     */
    getServiceAccount(id: string, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountData>;
    /**
     * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
     * @summary List all service accounts
     * @param {number} [first]
     * @param {number} [max]
     * @param {Set<string>} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiInterface
     */
    getServiceAccounts(first?: number, max?: number, clientId?: Set<string>, options?: AxiosRequestConfig): AxiosPromise<Array<ServiceAccountData>>;
    /**
     * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Reset service account secret by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiInterface
     */
    resetServiceAccountSecret(id: string, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountData>;
    /**
     * Update a service account by id.
     * @summary Update service account
     * @param {string} id
     * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiInterface
     */
    updateServiceAccount(id: string, serviceAccountRequestData: ServiceAccountRequestData, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountData>;
}
/**
 * ServiceAccountsApi - object-oriented interface
 * @export
 * @class ServiceAccountsApi
 * @extends {BaseAPI}
 */
export declare class ServiceAccountsApi extends BaseAPI implements ServiceAccountsApiInterface {
    /**
     * Create a service account. Created service account is associated with the user defined in the bearer token.
     * @summary Create service account
     * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    createServiceAccount(serviceAccountCreateRequestData: ServiceAccountCreateRequestData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccountData, any>>;
    /**
     * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Delete service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    deleteServiceAccount(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Get service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    getServiceAccount(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccountData, any>>;
    /**
     * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
     * @summary List all service accounts
     * @param {number} [first]
     * @param {number} [max]
     * @param {Set<string>} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    getServiceAccounts(first?: number, max?: number, clientId?: Set<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccountData[], any>>;
    /**
     * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Reset service account secret by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    resetServiceAccountSecret(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccountData, any>>;
    /**
     * Update a service account by id.
     * @summary Update service account
     * @param {string} id
     * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    updateServiceAccount(id: string, serviceAccountRequestData: ServiceAccountRequestData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceAccountData, any>>;
}
