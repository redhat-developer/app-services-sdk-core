/**
 * sso.redhat.com API documentation
 * This is the API documentation for sso.redhat.com
 *
 * The version of the OpenAPI document: 5.0.19-SNAPSHOT
 * Contact: it-user-team-list@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AuthenticationPolicy } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get current authentication policy information
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticationPolicy: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update current authentication policy information
     * @param {string} id
     * @param {AuthenticationPolicy} [authenticationPolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthenticationPolicy: (id: string, authenticationPolicy?: AuthenticationPolicy, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get current authentication policy information
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticationPolicy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationPolicy>>;
    /**
     *
     * @summary Update current authentication policy information
     * @param {string} id
     * @param {AuthenticationPolicy} [authenticationPolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthenticationPolicy(id: string, authenticationPolicy?: AuthenticationPolicy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationPolicy>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get current authentication policy information
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticationPolicy(id: string, options?: any): AxiosPromise<AuthenticationPolicy>;
    /**
     *
     * @summary Update current authentication policy information
     * @param {string} id
     * @param {AuthenticationPolicy} [authenticationPolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthenticationPolicy(id: string, authenticationPolicy?: AuthenticationPolicy, options?: any): AxiosPromise<AuthenticationPolicy>;
};
/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     *
     * @summary Get current authentication policy information
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAuthenticationPolicy(id: string, options?: AxiosRequestConfig): AxiosPromise<AuthenticationPolicy>;
    /**
     *
     * @summary Update current authentication policy information
     * @param {string} id
     * @param {AuthenticationPolicy} [authenticationPolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setAuthenticationPolicy(id: string, authenticationPolicy?: AuthenticationPolicy, options?: AxiosRequestConfig): AxiosPromise<AuthenticationPolicy>;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     *
     * @summary Get current authentication policy information
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getAuthenticationPolicy(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationPolicy, any>>;
    /**
     *
     * @summary Update current authentication policy information
     * @param {string} id
     * @param {AuthenticationPolicy} [authenticationPolicy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setAuthenticationPolicy(id: string, authenticationPolicy?: AuthenticationPolicy, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticationPolicy, any>>;
}
