/**
 * sso.redhat.com API documentation
 * This is the API documentation for sso.redhat.com
 *
 * The version of the OpenAPI document: 5.0.19-SNAPSHOT
 * Contact: it-user-team-list@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AcsClientRequestData } from '../model';
import { AcsClientResponseData } from '../model';
/**
 * AcsTenantsApi - axios parameter creator
 * @export
 */
export declare const AcsTenantsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
     * @summary Create ACS managed central client
     * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAcsClient: (acsClientRequestData: AcsClientRequestData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
     * @summary Delete ACS managed central client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAcsClient: (clientId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AcsTenantsApi - functional programming interface
 * @export
 */
export declare const AcsTenantsApiFp: (configuration?: Configuration) => {
    /**
     * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
     * @summary Create ACS managed central client
     * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAcsClient(acsClientRequestData: AcsClientRequestData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcsClientResponseData>>;
    /**
     * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
     * @summary Delete ACS managed central client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAcsClient(clientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AcsTenantsApi - factory interface
 * @export
 */
export declare const AcsTenantsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
     * @summary Create ACS managed central client
     * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAcsClient(acsClientRequestData: AcsClientRequestData, options?: any): AxiosPromise<AcsClientResponseData>;
    /**
     * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
     * @summary Delete ACS managed central client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAcsClient(clientId: string, options?: any): AxiosPromise<void>;
};
/**
 * AcsTenantsApi - interface
 * @export
 * @interface AcsTenantsApi
 */
export interface AcsTenantsApiInterface {
    /**
     * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
     * @summary Create ACS managed central client
     * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcsTenantsApiInterface
     */
    createAcsClient(acsClientRequestData: AcsClientRequestData, options?: AxiosRequestConfig): AxiosPromise<AcsClientResponseData>;
    /**
     * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
     * @summary Delete ACS managed central client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcsTenantsApiInterface
     */
    deleteAcsClient(clientId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * AcsTenantsApi - object-oriented interface
 * @export
 * @class AcsTenantsApi
 * @extends {BaseAPI}
 */
export declare class AcsTenantsApi extends BaseAPI implements AcsTenantsApiInterface {
    /**
     * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
     * @summary Create ACS managed central client
     * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcsTenantsApi
     */
    createAcsClient(acsClientRequestData: AcsClientRequestData, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AcsClientResponseData, any>>;
    /**
     * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
     * @summary Delete ACS managed central client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcsTenantsApi
     */
    deleteAcsClient(clientId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
