"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Account Management Service API
 * Manage user subscriptions and clusters
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppServicesApi = exports.AppServicesApiFactory = exports.AppServicesApiFp = exports.AppServicesApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AppServicesApi - axios parameter creator
 * @export
 */
const AppServicesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Return access token generated from registries in docker format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccessTokenPost: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/accounts_mgmt/v1/access_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get the authenticated account
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CurrentAccountGet: (fetchLabels, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/accounts_mgmt/v1/current_account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Returns a summary of quota cost
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: (orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'orgId' is not null or undefined
            (0, common_1.assertParamExists)('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId);
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (fetchRelatedResources !== undefined) {
                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;
            }
            if (forceRecalc !== undefined) {
                localVarQueryParameter['forceRecalc'] = forceRecalc;
            }
            if (fetchCloudAccounts !== undefined) {
                localVarQueryParameter['fetchCloudAccounts'] = fetchCloudAccounts;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost: (selfTermsReview, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'selfTermsReview' is not null or undefined
            (0, common_1.assertParamExists)('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview);
            const localVarPath = `/api/authorizations/v1/self_terms_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(selfTermsReview, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AppServicesApiAxiosParamCreator = AppServicesApiAxiosParamCreator;
/**
 * AppServicesApi - functional programming interface
 * @export
 */
const AppServicesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AppServicesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Return access token generated from registries in docker format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccessTokenPost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get the authenticated account
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Returns a summary of quota cost
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AppServicesApiFp = AppServicesApiFp;
/**
 * AppServicesApi - factory interface
 * @export
 */
const AppServicesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AppServicesApiFp)(configuration);
    return {
        /**
         *
         * @summary Return access token generated from registries in docker format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccessTokenPost(options) {
            return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the authenticated account
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options) {
            return localVarFp.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns a summary of quota cost
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
         * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
         * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options) {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options) {
            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AppServicesApiFactory = AppServicesApiFactory;
/**
 * AppServicesApi - object-oriented interface
 * @export
 * @class AppServicesApi
 * @extends {BaseAPI}
 */
class AppServicesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Return access token generated from registries in docker format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppServicesApi
     */
    apiAccountsMgmtV1AccessTokenPost(options) {
        return (0, exports.AppServicesApiFp)(this.configuration).apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the authenticated account
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppServicesApi
     */
    apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options) {
        return (0, exports.AppServicesApiFp)(this.configuration).apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns a summary of quota cost
     * @param {string} orgId The id of organization
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.
     * @param {boolean} [forceRecalc] If true, includes that ConsumedQuota should be recalculated.
     * @param {boolean} [fetchCloudAccounts] If true, includes the marketplace cloud accounts in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppServicesApi
     */
    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options) {
        return (0, exports.AppServicesApiFp)(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, forceRecalc, fetchCloudAccounts, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Review your status of Terms
     * @param {SelfTermsReview} selfTermsReview Data to check self terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppServicesApi
     */
    apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options) {
        return (0, exports.AppServicesApiFp)(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AppServicesApi = AppServicesApi;
