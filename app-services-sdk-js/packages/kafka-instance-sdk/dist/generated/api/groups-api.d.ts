/**
 * Kafka Instance API
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * The version of the OpenAPI document: 0.14.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ConsumerGroup } from '../model';
import { ConsumerGroupDescriptionOrderKey } from '../model';
import { ConsumerGroupList } from '../model';
import { ConsumerGroupOrderKey } from '../model';
import { ConsumerGroupResetOffsetParameters } from '../model';
import { ConsumerGroupResetOffsetResult } from '../model';
import { SortDirection } from '../model';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export declare const GroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerGroupById: (consumerGroupId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupDescriptionOrderKey} [orderKey]
     * @param {number} [partitionFilter] Value of partition to include. Value -1 means filter is not active.
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupById: (consumerGroupId: string, order?: SortDirection, orderKey?: ConsumerGroupDescriptionOrderKey, partitionFilter?: number, topic?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all consumer groups for a particular Kafka instance. The consumer groups returned are limited to those records the requestor is authorized to view.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {number} [page] Page number
     * @param {string} [topic] Return consumer groups where the topic name contains this value
     * @param {string} [groupIdFilter] Return the consumer groups where the ID contains this value
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupOrderKey} [orderKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroups: (offset?: number, limit?: number, size?: number, page?: number, topic?: string, groupIdFilter?: string, order?: SortDirection, orderKey?: ConsumerGroupOrderKey, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {ConsumerGroupResetOffsetParameters} consumerGroupResetOffsetParameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConsumerGroupOffset: (consumerGroupId: string, consumerGroupResetOffsetParameters: ConsumerGroupResetOffsetParameters, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export declare const GroupsApiFp: (configuration?: Configuration) => {
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerGroupById(consumerGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupDescriptionOrderKey} [orderKey]
     * @param {number} [partitionFilter] Value of partition to include. Value -1 means filter is not active.
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupById(consumerGroupId: string, order?: SortDirection, orderKey?: ConsumerGroupDescriptionOrderKey, partitionFilter?: number, topic?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroup>>;
    /**
     * Returns a list of all consumer groups for a particular Kafka instance. The consumer groups returned are limited to those records the requestor is authorized to view.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {number} [page] Page number
     * @param {string} [topic] Return consumer groups where the topic name contains this value
     * @param {string} [groupIdFilter] Return the consumer groups where the ID contains this value
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupOrderKey} [orderKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroups(offset?: number, limit?: number, size?: number, page?: number, topic?: string, groupIdFilter?: string, order?: SortDirection, orderKey?: ConsumerGroupOrderKey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroupList>>;
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {ConsumerGroupResetOffsetParameters} consumerGroupResetOffsetParameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConsumerGroupOffset(consumerGroupId: string, consumerGroupResetOffsetParameters: ConsumerGroupResetOffsetParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroupResetOffsetResult>>;
};
/**
 * GroupsApi - factory interface
 * @export
 */
export declare const GroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConsumerGroupById(consumerGroupId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupDescriptionOrderKey} [orderKey]
     * @param {number} [partitionFilter] Value of partition to include. Value -1 means filter is not active.
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroupById(consumerGroupId: string, order?: SortDirection, orderKey?: ConsumerGroupDescriptionOrderKey, partitionFilter?: number, topic?: string, options?: any): AxiosPromise<ConsumerGroup>;
    /**
     * Returns a list of all consumer groups for a particular Kafka instance. The consumer groups returned are limited to those records the requestor is authorized to view.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {number} [page] Page number
     * @param {string} [topic] Return consumer groups where the topic name contains this value
     * @param {string} [groupIdFilter] Return the consumer groups where the ID contains this value
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupOrderKey} [orderKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConsumerGroups(offset?: number, limit?: number, size?: number, page?: number, topic?: string, groupIdFilter?: string, order?: SortDirection, orderKey?: ConsumerGroupOrderKey, options?: any): AxiosPromise<ConsumerGroupList>;
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {ConsumerGroupResetOffsetParameters} consumerGroupResetOffsetParameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConsumerGroupOffset(consumerGroupId: string, consumerGroupResetOffsetParameters: ConsumerGroupResetOffsetParameters, options?: any): AxiosPromise<ConsumerGroupResetOffsetResult>;
};
/**
 * GroupsApi - interface
 * @export
 * @interface GroupsApi
 */
export interface GroupsApiInterface {
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    deleteConsumerGroupById(consumerGroupId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupDescriptionOrderKey} [orderKey]
     * @param {number} [partitionFilter] Value of partition to include. Value -1 means filter is not active.
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getConsumerGroupById(consumerGroupId: string, order?: SortDirection, orderKey?: ConsumerGroupDescriptionOrderKey, partitionFilter?: number, topic?: string, options?: AxiosRequestConfig): AxiosPromise<ConsumerGroup>;
    /**
     * Returns a list of all consumer groups for a particular Kafka instance. The consumer groups returned are limited to those records the requestor is authorized to view.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {number} [page] Page number
     * @param {string} [topic] Return consumer groups where the topic name contains this value
     * @param {string} [groupIdFilter] Return the consumer groups where the ID contains this value
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupOrderKey} [orderKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getConsumerGroups(offset?: number, limit?: number, size?: number, page?: number, topic?: string, groupIdFilter?: string, order?: SortDirection, orderKey?: ConsumerGroupOrderKey, options?: AxiosRequestConfig): AxiosPromise<ConsumerGroupList>;
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {ConsumerGroupResetOffsetParameters} consumerGroupResetOffsetParameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    resetConsumerGroupOffset(consumerGroupId: string, consumerGroupResetOffsetParameters: ConsumerGroupResetOffsetParameters, options?: AxiosRequestConfig): AxiosPromise<ConsumerGroupResetOffsetResult>;
}
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export declare class GroupsApi extends BaseAPI implements GroupsApiInterface {
    /**
     * Delete a consumer group, along with its consumers.
     * @summary Delete a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    deleteConsumerGroupById(consumerGroupId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get a single consumer group by its unique ID.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupDescriptionOrderKey} [orderKey]
     * @param {number} [partitionFilter] Value of partition to include. Value -1 means filter is not active.
     * @param {string} [topic] Filter consumer groups for a specific topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getConsumerGroupById(consumerGroupId: string, order?: SortDirection, orderKey?: ConsumerGroupDescriptionOrderKey, partitionFilter?: number, topic?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConsumerGroup, any>>;
    /**
     * Returns a list of all consumer groups for a particular Kafka instance. The consumer groups returned are limited to those records the requestor is authorized to view.
     * @summary List of consumer groups in the Kafka instance.
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {number} [page] Page number
     * @param {string} [topic] Return consumer groups where the topic name contains this value
     * @param {string} [groupIdFilter] Return the consumer groups where the ID contains this value
     * @param {SortDirection} [order] Order items are sorted
     * @param {ConsumerGroupOrderKey} [orderKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getConsumerGroups(offset?: number, limit?: number, size?: number, page?: number, topic?: string, groupIdFilter?: string, order?: SortDirection, orderKey?: ConsumerGroupOrderKey, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConsumerGroupList, any>>;
    /**
     * Reset the offset for a particular consumer group.
     * @summary Reset the offset for a consumer group.
     * @param {string} consumerGroupId Consumer group identifier
     * @param {ConsumerGroupResetOffsetParameters} consumerGroupResetOffsetParameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    resetConsumerGroupOffset(consumerGroupId: string, consumerGroupResetOffsetParameters: ConsumerGroupResetOffsetParameters, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConsumerGroupResetOffsetResult, any>>;
}
