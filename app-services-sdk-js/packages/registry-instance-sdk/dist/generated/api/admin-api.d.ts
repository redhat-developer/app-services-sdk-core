/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ArtifactTypeInfo } from '../model';
import { ConfigurationProperty } from '../model';
import { LogConfiguration } from '../model';
import { NamedLogConfiguration } from '../model';
import { RoleMapping } from '../model';
import { Rule } from '../model';
import { RuleType } from '../model';
import { UpdateConfigurationProperty } from '../model';
import { UpdateRole } from '../model';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create global rule
     * @param {Rule} rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGlobalRule: (rule: Rule, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Create a new role mapping
     * @param {RoleMapping} roleMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoleMapping: (roleMapping: RoleMapping, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Delete all global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllGlobalRules: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Delete global rule
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGlobalRule: (rule: RuleType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleMapping: (principalId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exports registry data as a ZIP archive.
     * @summary Export registry data
     * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportData: (forBrowser?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get configuration property value
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigProperty: (propertyName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalRuleConfig: (rule: RuleType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @summary Get a single logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogConfiguration: (logger: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Return a single role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMapping: (principalId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @summary Import registry data
     * @param {any} body The ZIP file representing the previously exported registry data.
     * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importData: (body: any, xRegistryPreserveGlobalId?: boolean, xRegistryPreserveContentId?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArtifactTypes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all configuration properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigProperties: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGlobalRules: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all of the configured logging levels.  These override the default logging configuration.
     * @summary List logging configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLogConfigurations: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all role mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleMappings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes the configured logger configuration (if any) for the given logger.
     * @summary Removes logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLogConfiguration: (logger: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Reset a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConfigProperty: (propertyName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @summary Set a logger\'s configuration
     * @param {string} logger The name of a single logger.
     * @param {LogConfiguration} logConfiguration The new logger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogConfiguration: (logger: string, logConfiguration: LogConfiguration, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {UpdateConfigurationProperty} updateConfigurationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigProperty: (propertyName: string, updateConfigurationProperty: UpdateConfigurationProperty, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {Rule} rule2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGlobalRuleConfig: (rule: RuleType, rule2: Rule, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {UpdateRole} updateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleMapping: (principalId: string, updateRole: UpdateRole, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create global rule
     * @param {Rule} rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGlobalRule(rule: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Create a new role mapping
     * @param {RoleMapping} roleMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoleMapping(roleMapping: RoleMapping, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Delete all global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllGlobalRules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Delete global rule
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGlobalRule(rule: RuleType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleMapping(principalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Exports registry data as a ZIP archive.
     * @summary Export registry data
     * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportData(forBrowser?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get configuration property value
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigProperty(propertyName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationProperty>>;
    /**
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalRuleConfig(rule: RuleType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>>;
    /**
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @summary Get a single logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogConfiguration(logger: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedLogConfiguration>>;
    /**
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Return a single role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMapping(principalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMapping>>;
    /**
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @summary Import registry data
     * @param {any} body The ZIP file representing the previously exported registry data.
     * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importData(body: any, xRegistryPreserveGlobalId?: boolean, xRegistryPreserveContentId?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArtifactTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArtifactTypeInfo>>>;
    /**
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all configuration properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigProperties(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigurationProperty>>>;
    /**
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGlobalRules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RuleType>>>;
    /**
     * List all of the configured logging levels.  These override the default logging configuration.
     * @summary List logging configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLogConfigurations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NamedLogConfiguration>>>;
    /**
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all role mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleMappings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMapping>>>;
    /**
     * Removes the configured logger configuration (if any) for the given logger.
     * @summary Removes logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLogConfiguration(logger: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedLogConfiguration>>;
    /**
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Reset a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConfigProperty(propertyName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @summary Set a logger\'s configuration
     * @param {string} logger The name of a single logger.
     * @param {LogConfiguration} logConfiguration The new logger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogConfiguration(logger: string, logConfiguration: LogConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamedLogConfiguration>>;
    /**
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {UpdateConfigurationProperty} updateConfigurationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigProperty(propertyName: string, updateConfigurationProperty: UpdateConfigurationProperty, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {Rule} rule2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGlobalRuleConfig(rule: RuleType, rule2: Rule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>>;
    /**
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {UpdateRole} updateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleMapping(principalId: string, updateRole: UpdateRole, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create global rule
     * @param {Rule} rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGlobalRule(rule: Rule, options?: any): AxiosPromise<void>;
    /**
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Create a new role mapping
     * @param {RoleMapping} roleMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoleMapping(roleMapping: RoleMapping, options?: any): AxiosPromise<void>;
    /**
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Delete all global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllGlobalRules(options?: any): AxiosPromise<void>;
    /**
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Delete global rule
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGlobalRule(rule: RuleType, options?: any): AxiosPromise<void>;
    /**
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleMapping(principalId: string, options?: any): AxiosPromise<void>;
    /**
     * Exports registry data as a ZIP archive.
     * @summary Export registry data
     * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportData(forBrowser?: boolean, options?: any): AxiosPromise<any>;
    /**
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get configuration property value
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfigProperty(propertyName: string, options?: any): AxiosPromise<ConfigurationProperty>;
    /**
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalRuleConfig(rule: RuleType, options?: any): AxiosPromise<Rule>;
    /**
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @summary Get a single logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogConfiguration(logger: string, options?: any): AxiosPromise<NamedLogConfiguration>;
    /**
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Return a single role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMapping(principalId: string, options?: any): AxiosPromise<RoleMapping>;
    /**
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @summary Import registry data
     * @param {any} body The ZIP file representing the previously exported registry data.
     * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importData(body: any, xRegistryPreserveGlobalId?: boolean, xRegistryPreserveContentId?: boolean, options?: any): AxiosPromise<void>;
    /**
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listArtifactTypes(options?: any): AxiosPromise<Array<ArtifactTypeInfo>>;
    /**
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all configuration properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConfigProperties(options?: any): AxiosPromise<Array<ConfigurationProperty>>;
    /**
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGlobalRules(options?: any): AxiosPromise<Array<RuleType>>;
    /**
     * List all of the configured logging levels.  These override the default logging configuration.
     * @summary List logging configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listLogConfigurations(options?: any): AxiosPromise<Array<NamedLogConfiguration>>;
    /**
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all role mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleMappings(options?: any): AxiosPromise<Array<RoleMapping>>;
    /**
     * Removes the configured logger configuration (if any) for the given logger.
     * @summary Removes logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLogConfiguration(logger: string, options?: any): AxiosPromise<NamedLogConfiguration>;
    /**
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Reset a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetConfigProperty(propertyName: string, options?: any): AxiosPromise<void>;
    /**
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @summary Set a logger\'s configuration
     * @param {string} logger The name of a single logger.
     * @param {LogConfiguration} logConfiguration The new logger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogConfiguration(logger: string, logConfiguration: LogConfiguration, options?: any): AxiosPromise<NamedLogConfiguration>;
    /**
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {UpdateConfigurationProperty} updateConfigurationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConfigProperty(propertyName: string, updateConfigurationProperty: UpdateConfigurationProperty, options?: any): AxiosPromise<void>;
    /**
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {Rule} rule2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGlobalRuleConfig(rule: RuleType, rule2: Rule, options?: any): AxiosPromise<Rule>;
    /**
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {UpdateRole} updateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleMapping(principalId: string, updateRole: UpdateRole, options?: any): AxiosPromise<void>;
};
/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create global rule
     * @param {Rule} rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    createGlobalRule(rule: Rule, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Create a new role mapping
     * @param {RoleMapping} roleMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    createRoleMapping(roleMapping: RoleMapping, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Delete all global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteAllGlobalRules(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Delete global rule
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteGlobalRule(rule: RuleType, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    deleteRoleMapping(principalId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Exports registry data as a ZIP archive.
     * @summary Export registry data
     * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    exportData(forBrowser?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get configuration property value
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getConfigProperty(propertyName: string, options?: AxiosRequestConfig): AxiosPromise<ConfigurationProperty>;
    /**
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getGlobalRuleConfig(rule: RuleType, options?: AxiosRequestConfig): AxiosPromise<Rule>;
    /**
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @summary Get a single logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getLogConfiguration(logger: string, options?: AxiosRequestConfig): AxiosPromise<NamedLogConfiguration>;
    /**
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Return a single role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getRoleMapping(principalId: string, options?: AxiosRequestConfig): AxiosPromise<RoleMapping>;
    /**
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @summary Import registry data
     * @param {any} body The ZIP file representing the previously exported registry data.
     * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    importData(body: any, xRegistryPreserveGlobalId?: boolean, xRegistryPreserveContentId?: boolean, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listArtifactTypes(options?: AxiosRequestConfig): AxiosPromise<Array<ArtifactTypeInfo>>;
    /**
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all configuration properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listConfigProperties(options?: AxiosRequestConfig): AxiosPromise<Array<ConfigurationProperty>>;
    /**
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listGlobalRules(options?: AxiosRequestConfig): AxiosPromise<Array<RuleType>>;
    /**
     * List all of the configured logging levels.  These override the default logging configuration.
     * @summary List logging configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listLogConfigurations(options?: AxiosRequestConfig): AxiosPromise<Array<NamedLogConfiguration>>;
    /**
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all role mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listRoleMappings(options?: AxiosRequestConfig): AxiosPromise<Array<RoleMapping>>;
    /**
     * Removes the configured logger configuration (if any) for the given logger.
     * @summary Removes logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    removeLogConfiguration(logger: string, options?: AxiosRequestConfig): AxiosPromise<NamedLogConfiguration>;
    /**
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Reset a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    resetConfigProperty(propertyName: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @summary Set a logger\'s configuration
     * @param {string} logger The name of a single logger.
     * @param {LogConfiguration} logConfiguration The new logger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    setLogConfiguration(logger: string, logConfiguration: LogConfiguration, options?: AxiosRequestConfig): AxiosPromise<NamedLogConfiguration>;
    /**
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {UpdateConfigurationProperty} updateConfigurationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateConfigProperty(propertyName: string, updateConfigurationProperty: UpdateConfigurationProperty, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {Rule} rule2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateGlobalRuleConfig(rule: RuleType, rule2: Rule, options?: AxiosRequestConfig): AxiosPromise<Rule>;
    /**
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {UpdateRole} updateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateRoleMapping(principalId: string, updateRole: UpdateRole, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create global rule
     * @param {Rule} rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createGlobalRule(rule: Rule, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Create a new role mapping
     * @param {RoleMapping} roleMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createRoleMapping(roleMapping: RoleMapping, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Delete all global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteAllGlobalRules(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Delete global rule
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteGlobalRule(rule: RuleType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteRoleMapping(principalId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Exports registry data as a ZIP archive.
     * @summary Export registry data
     * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    exportData(forBrowser?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get configuration property value
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getConfigProperty(propertyName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationProperty, any>>;
    /**
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getGlobalRuleConfig(rule: RuleType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Rule, any>>;
    /**
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @summary Get a single logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getLogConfiguration(logger: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NamedLogConfiguration, any>>;
    /**
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Return a single role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getRoleMapping(principalId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMapping, any>>;
    /**
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @summary Import registry data
     * @param {any} body The ZIP file representing the previously exported registry data.
     * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    importData(body: any, xRegistryPreserveGlobalId?: boolean, xRegistryPreserveContentId?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listArtifactTypes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ArtifactTypeInfo[], any>>;
    /**
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all configuration properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listConfigProperties(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationProperty[], any>>;
    /**
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listGlobalRules(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RuleType[], any>>;
    /**
     * List all of the configured logging levels.  These override the default logging configuration.
     * @summary List logging configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listLogConfigurations(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NamedLogConfiguration[], any>>;
    /**
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all role mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listRoleMappings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMapping[], any>>;
    /**
     * Removes the configured logger configuration (if any) for the given logger.
     * @summary Removes logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    removeLogConfiguration(logger: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NamedLogConfiguration, any>>;
    /**
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Reset a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    resetConfigProperty(propertyName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @summary Set a logger\'s configuration
     * @param {string} logger The name of a single logger.
     * @param {LogConfiguration} logConfiguration The new logger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    setLogConfiguration(logger: string, logConfiguration: LogConfiguration, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NamedLogConfiguration, any>>;
    /**
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {UpdateConfigurationProperty} updateConfigurationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateConfigProperty(propertyName: string, updateConfigurationProperty: UpdateConfigurationProperty, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {Rule} rule2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateGlobalRuleConfig(rule: RuleType, rule2: Rule, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Rule, any>>;
    /**
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {UpdateRole} updateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateRoleMapping(principalId: string, updateRole: UpdateRole, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
