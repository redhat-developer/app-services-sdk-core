"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminApi = exports.AdminApiFactory = exports.AdminApiFp = exports.AdminApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AdminApi - axios parameter creator
 * @export
 */
const AdminApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Create global rule
         * @param {Rule} rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGlobalRule: (rule, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rule' is not null or undefined
            (0, common_1.assertParamExists)('createGlobalRule', 'rule', rule);
            const localVarPath = `/admin/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(rule, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary Create a new role mapping
         * @param {RoleMapping} roleMapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleMapping: (roleMapping, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'roleMapping' is not null or undefined
            (0, common_1.assertParamExists)('createRoleMapping', 'roleMapping', roleMapping);
            const localVarPath = `/admin/roleMappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleMapping, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary Delete all global rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllGlobalRules: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Delete global rule
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobalRule: (rule, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rule' is not null or undefined
            (0, common_1.assertParamExists)('deleteGlobalRule', 'rule', rule);
            const localVarPath = `/admin/rules/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Delete a role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleMapping: (principalId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'principalId' is not null or undefined
            (0, common_1.assertParamExists)('deleteRoleMapping', 'principalId', principalId);
            const localVarPath = `/admin/roleMappings/{principalId}`
                .replace(`{${"principalId"}}`, encodeURIComponent(String(principalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Exports registry data as a ZIP archive.
         * @summary Export registry data
         * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportData: (forBrowser, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (forBrowser !== undefined) {
                localVarQueryParameter['forBrowser'] = forBrowser;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get configuration property value
         * @param {string} propertyName The name of a configuration property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigProperty: (propertyName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyName' is not null or undefined
            (0, common_1.assertParamExists)('getConfigProperty', 'propertyName', propertyName);
            const localVarPath = `/admin/config/properties/{propertyName}`
                .replace(`{${"propertyName"}}`, encodeURIComponent(String(propertyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get global rule configuration
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalRuleConfig: (rule, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rule' is not null or undefined
            (0, common_1.assertParamExists)('getGlobalRuleConfig', 'rule', rule);
            const localVarPath = `/admin/rules/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
         * @summary Get a single logger configuration
         * @param {string} logger The name of a single logger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogConfiguration: (logger, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logger' is not null or undefined
            (0, common_1.assertParamExists)('getLogConfiguration', 'logger', logger);
            const localVarPath = `/admin/loggers/{logger}`
                .replace(`{${"logger"}}`, encodeURIComponent(String(logger)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Return a single role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMapping: (principalId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'principalId' is not null or undefined
            (0, common_1.assertParamExists)('getRoleMapping', 'principalId', principalId);
            const localVarPath = `/admin/roleMappings/{principalId}`
                .replace(`{${"principalId"}}`, encodeURIComponent(String(principalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Imports registry data that was previously exported using the `/admin/export` operation.
         * @summary Import registry data
         * @param {any} body The ZIP file representing the previously exported registry data.
         * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
         * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importData: (body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('importData', 'body', body);
            const localVarPath = `/admin/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRegistryPreserveGlobalId !== undefined && xRegistryPreserveGlobalId !== null) {
                localVarHeaderParameter['X-Registry-Preserve-GlobalId'] = String(JSON.stringify(xRegistryPreserveGlobalId));
            }
            if (xRegistryPreserveContentId !== undefined && xRegistryPreserveContentId !== null) {
                localVarHeaderParameter['X-Registry-Preserve-ContentId'] = String(JSON.stringify(xRegistryPreserveContentId));
            }
            localVarHeaderParameter['Content-Type'] = 'application/zip';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactTypes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/artifactTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List all configuration properties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConfigProperties: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/config/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List global rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGlobalRules: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all of the configured logging levels.  These override the default logging configuration.
         * @summary List logging configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogConfigurations: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/loggers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List all role mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleMappings: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/admin/roleMappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes the configured logger configuration (if any) for the given logger.
         * @summary Removes logger configuration
         * @param {string} logger The name of a single logger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogConfiguration: (logger, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logger' is not null or undefined
            (0, common_1.assertParamExists)('removeLogConfiguration', 'logger', logger);
            const localVarPath = `/admin/loggers/{logger}`
                .replace(`{${"logger"}}`, encodeURIComponent(String(logger)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Reset a configuration property
         * @param {string} propertyName The name of a configuration property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetConfigProperty: (propertyName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyName' is not null or undefined
            (0, common_1.assertParamExists)('resetConfigProperty', 'propertyName', propertyName);
            const localVarPath = `/admin/config/properties/{propertyName}`
                .replace(`{${"propertyName"}}`, encodeURIComponent(String(propertyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Configures the logger referenced by the provided logger name with the given configuration.
         * @summary Set a logger\'s configuration
         * @param {string} logger The name of a single logger.
         * @param {LogConfiguration} logConfiguration The new logger configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogConfiguration: (logger, logConfiguration, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'logger' is not null or undefined
            (0, common_1.assertParamExists)('setLogConfiguration', 'logger', logger);
            // verify required parameter 'logConfiguration' is not null or undefined
            (0, common_1.assertParamExists)('setLogConfiguration', 'logConfiguration', logConfiguration);
            const localVarPath = `/admin/loggers/{logger}`
                .replace(`{${"logger"}}`, encodeURIComponent(String(logger)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logConfiguration, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update a configuration property
         * @param {string} propertyName The name of a configuration property.
         * @param {UpdateConfigurationProperty} updateConfigurationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfigProperty: (propertyName, updateConfigurationProperty, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'propertyName' is not null or undefined
            (0, common_1.assertParamExists)('updateConfigProperty', 'propertyName', propertyName);
            // verify required parameter 'updateConfigurationProperty' is not null or undefined
            (0, common_1.assertParamExists)('updateConfigProperty', 'updateConfigurationProperty', updateConfigurationProperty);
            const localVarPath = `/admin/config/properties/{propertyName}`
                .replace(`{${"propertyName"}}`, encodeURIComponent(String(propertyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateConfigurationProperty, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update global rule configuration
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {Rule} rule2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGlobalRuleConfig: (rule, rule2, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rule' is not null or undefined
            (0, common_1.assertParamExists)('updateGlobalRuleConfig', 'rule', rule);
            // verify required parameter 'rule2' is not null or undefined
            (0, common_1.assertParamExists)('updateGlobalRuleConfig', 'rule2', rule2);
            const localVarPath = `/admin/rules/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(rule2, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update a role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {UpdateRole} updateRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleMapping: (principalId, updateRole, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'principalId' is not null or undefined
            (0, common_1.assertParamExists)('updateRoleMapping', 'principalId', principalId);
            // verify required parameter 'updateRole' is not null or undefined
            (0, common_1.assertParamExists)('updateRoleMapping', 'updateRole', updateRole);
            const localVarPath = `/admin/roleMappings/{principalId}`
                .replace(`{${"principalId"}}`, encodeURIComponent(String(principalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateRole, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AdminApiAxiosParamCreator = AdminApiAxiosParamCreator;
/**
 * AdminApi - functional programming interface
 * @export
 */
const AdminApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AdminApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Create global rule
         * @param {Rule} rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGlobalRule(rule, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createGlobalRule(rule, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary Create a new role mapping
         * @param {RoleMapping} roleMapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleMapping(roleMapping, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRoleMapping(roleMapping, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary Delete all global rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllGlobalRules(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAllGlobalRules(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Delete global rule
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobalRule(rule, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGlobalRule(rule, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Delete a role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleMapping(principalId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRoleMapping(principalId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Exports registry data as a ZIP archive.
         * @summary Export registry data
         * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportData(forBrowser, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.exportData(forBrowser, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get configuration property value
         * @param {string} propertyName The name of a configuration property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigProperty(propertyName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConfigProperty(propertyName, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get global rule configuration
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalRuleConfig(rule, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGlobalRuleConfig(rule, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
         * @summary Get a single logger configuration
         * @param {string} logger The name of a single logger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogConfiguration(logger, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLogConfiguration(logger, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Return a single role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMapping(principalId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoleMapping(principalId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Imports registry data that was previously exported using the `/admin/export` operation.
         * @summary Import registry data
         * @param {any} body The ZIP file representing the previously exported registry data.
         * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
         * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactTypes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listArtifactTypes(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List all configuration properties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConfigProperties(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listConfigProperties(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List global rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGlobalRules(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listGlobalRules(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List all of the configured logging levels.  These override the default logging configuration.
         * @summary List logging configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogConfigurations(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listLogConfigurations(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List all role mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleMappings(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRoleMappings(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Removes the configured logger configuration (if any) for the given logger.
         * @summary Removes logger configuration
         * @param {string} logger The name of a single logger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogConfiguration(logger, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeLogConfiguration(logger, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Reset a configuration property
         * @param {string} propertyName The name of a configuration property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetConfigProperty(propertyName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetConfigProperty(propertyName, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Configures the logger referenced by the provided logger name with the given configuration.
         * @summary Set a logger\'s configuration
         * @param {string} logger The name of a single logger.
         * @param {LogConfiguration} logConfiguration The new logger configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogConfiguration(logger, logConfiguration, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setLogConfiguration(logger, logConfiguration, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update a configuration property
         * @param {string} propertyName The name of a configuration property.
         * @param {UpdateConfigurationProperty} updateConfigurationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfigProperty(propertyName, updateConfigurationProperty, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateConfigProperty(propertyName, updateConfigurationProperty, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update global rule configuration
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {Rule} rule2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGlobalRuleConfig(rule, rule2, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateGlobalRuleConfig(rule, rule2, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update a role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {UpdateRole} updateRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleMapping(principalId, updateRole, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRoleMapping(principalId, updateRole, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AdminApiFp = AdminApiFp;
/**
 * AdminApi - factory interface
 * @export
 */
const AdminApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AdminApiFp)(configuration);
    return {
        /**
         * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Create global rule
         * @param {Rule} rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGlobalRule(rule, options) {
            return localVarFp.createGlobalRule(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary Create a new role mapping
         * @param {RoleMapping} roleMapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleMapping(roleMapping, options) {
            return localVarFp.createRoleMapping(roleMapping, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary Delete all global rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllGlobalRules(options) {
            return localVarFp.deleteAllGlobalRules(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Delete global rule
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobalRule(rule, options) {
            return localVarFp.deleteGlobalRule(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Delete a role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleMapping(principalId, options) {
            return localVarFp.deleteRoleMapping(principalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Exports registry data as a ZIP archive.
         * @summary Export registry data
         * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportData(forBrowser, options) {
            return localVarFp.exportData(forBrowser, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get configuration property value
         * @param {string} propertyName The name of a configuration property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigProperty(propertyName, options) {
            return localVarFp.getConfigProperty(propertyName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get global rule configuration
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalRuleConfig(rule, options) {
            return localVarFp.getGlobalRuleConfig(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
         * @summary Get a single logger configuration
         * @param {string} logger The name of a single logger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogConfiguration(logger, options) {
            return localVarFp.getLogConfiguration(logger, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Return a single role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMapping(principalId, options) {
            return localVarFp.getRoleMapping(principalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Imports registry data that was previously exported using the `/admin/export` operation.
         * @summary Import registry data
         * @param {any} body The ZIP file representing the previously exported registry data.
         * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
         * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options) {
            return localVarFp.importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactTypes(options) {
            return localVarFp.listArtifactTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List all configuration properties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConfigProperties(options) {
            return localVarFp.listConfigProperties(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List global rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGlobalRules(options) {
            return localVarFp.listGlobalRules(options).then((request) => request(axios, basePath));
        },
        /**
         * List all of the configured logging levels.  These override the default logging configuration.
         * @summary List logging configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogConfigurations(options) {
            return localVarFp.listLogConfigurations(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List all role mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleMappings(options) {
            return localVarFp.listRoleMappings(options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the configured logger configuration (if any) for the given logger.
         * @summary Removes logger configuration
         * @param {string} logger The name of a single logger.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeLogConfiguration(logger, options) {
            return localVarFp.removeLogConfiguration(logger, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Reset a configuration property
         * @param {string} propertyName The name of a configuration property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetConfigProperty(propertyName, options) {
            return localVarFp.resetConfigProperty(propertyName, options).then((request) => request(axios, basePath));
        },
        /**
         * Configures the logger referenced by the provided logger name with the given configuration.
         * @summary Set a logger\'s configuration
         * @param {string} logger The name of a single logger.
         * @param {LogConfiguration} logConfiguration The new logger configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogConfiguration(logger, logConfiguration, options) {
            return localVarFp.setLogConfiguration(logger, logConfiguration, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update a configuration property
         * @param {string} propertyName The name of a configuration property.
         * @param {UpdateConfigurationProperty} updateConfigurationProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfigProperty(propertyName, updateConfigurationProperty, options) {
            return localVarFp.updateConfigProperty(propertyName, updateConfigurationProperty, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update global rule configuration
         * @param {RuleType} rule The unique name/type of a rule.
         * @param {Rule} rule2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGlobalRuleConfig(rule, rule2, options) {
            return localVarFp.updateGlobalRuleConfig(rule, rule2, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update a role mapping
         * @param {string} principalId Unique id of a principal (typically either a user or service account).
         * @param {UpdateRole} updateRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleMapping(principalId, updateRole, options) {
            return localVarFp.updateRoleMapping(principalId, updateRole, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AdminApiFactory = AdminApiFactory;
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
class AdminApi extends base_1.BaseAPI {
    /**
     * Adds a rule to the list of globally configured rules.  This operation can fail for the following reasons:  * The rule type is unknown (HTTP error `400`) * The rule already exists (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create global rule
     * @param {Rule} rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createGlobalRule(rule, options) {
        return (0, exports.AdminApiFp)(this.configuration).createGlobalRule(rule, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new mapping between a user/principal and a role.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Create a new role mapping
     * @param {RoleMapping} roleMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    createRoleMapping(roleMapping, options) {
        return (0, exports.AdminApiFp)(this.configuration).createRoleMapping(roleMapping, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes all globally configured rules.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary Delete all global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteAllGlobalRules(options) {
        return (0, exports.AdminApiFp)(this.configuration).deleteAllGlobalRules(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a single global rule.  If this is the only rule configured, this is the same as deleting **all** rules.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * Rule cannot be deleted (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Delete global rule
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteGlobalRule(rule, options) {
        return (0, exports.AdminApiFp)(this.configuration).deleteGlobalRule(rule, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a single role mapping, effectively denying access to a user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    deleteRoleMapping(principalId, options) {
        return (0, exports.AdminApiFp)(this.configuration).deleteRoleMapping(principalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Exports registry data as a ZIP archive.
     * @summary Export registry data
     * @param {boolean} [forBrowser] Indicates if the operation is done for a browser.  If true, the response will be a JSON payload with a property called &#x60;href&#x60;.  This &#x60;href&#x60; will be a single-use, naked download link suitable for use by a web browser to download the content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    exportData(forBrowser, options) {
        return (0, exports.AdminApiFp)(this.configuration).exportData(forBrowser, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get configuration property value
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getConfigProperty(propertyName, options) {
        return (0, exports.AdminApiFp)(this.configuration).getConfigProperty(propertyName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns information about the named globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getGlobalRuleConfig(rule, options) {
        return (0, exports.AdminApiFp)(this.configuration).getGlobalRuleConfig(rule, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the configured logger configuration for the provided logger name, if no logger configuration is persisted it will return the current default log configuration in the system.
     * @summary Get a single logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getLogConfiguration(logger, options) {
        return (0, exports.AdminApiFp)(this.configuration).getLogConfiguration(logger, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the details of a single role mapping (by `principalId`).  This operation can fail for the following reasons:  * No role mapping for the `principalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Return a single role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getRoleMapping(principalId, options) {
        return (0, exports.AdminApiFp)(this.configuration).getRoleMapping(principalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Imports registry data that was previously exported using the `/admin/export` operation.
     * @summary Import registry data
     * @param {any} body The ZIP file representing the previously exported registry data.
     * @param {boolean} [xRegistryPreserveGlobalId] If this header is set to false, global ids of imported data will be ignored and replaced by next id in global id sequence. This allows to import any data even thought the global ids would cause a conflict.
     * @param {boolean} [xRegistryPreserveContentId] If this header is set to false, content ids of imported data will be ignored and replaced by next id in content id sequence. The mapping between content and artifacts will be preserved. This allows to import any data even thought the content ids would cause a conflict.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options) {
        return (0, exports.AdminApiFp)(this.configuration).importData(body, xRegistryPreserveGlobalId, xRegistryPreserveContentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a list of all the configured artifact types.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listArtifactTypes(options) {
        return (0, exports.AdminApiFp)(this.configuration).listArtifactTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all configuration properties that have been set.  The list is not paged.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all configuration properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listConfigProperties(options) {
        return (0, exports.AdminApiFp)(this.configuration).listConfigProperties(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a list of all the currently configured global rules (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List global rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listGlobalRules(options) {
        return (0, exports.AdminApiFp)(this.configuration).listGlobalRules(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all of the configured logging levels.  These override the default logging configuration.
     * @summary List logging configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listLogConfigurations(options) {
        return (0, exports.AdminApiFp)(this.configuration).listLogConfigurations(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a list of all role mappings configured in the registry (if any).  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List all role mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    listRoleMappings(options) {
        return (0, exports.AdminApiFp)(this.configuration).listRoleMappings(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes the configured logger configuration (if any) for the given logger.
     * @summary Removes logger configuration
     * @param {string} logger The name of a single logger.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    removeLogConfiguration(logger, options) {
        return (0, exports.AdminApiFp)(this.configuration).removeLogConfiguration(logger, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resets the value of a single configuration property.  This will return the property to its default value (see external documentation for supported properties and their default values).  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Reset a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    resetConfigProperty(propertyName, options) {
        return (0, exports.AdminApiFp)(this.configuration).resetConfigProperty(propertyName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Configures the logger referenced by the provided logger name with the given configuration.
     * @summary Set a logger\'s configuration
     * @param {string} logger The name of a single logger.
     * @param {LogConfiguration} logConfiguration The new logger configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    setLogConfiguration(logger, logConfiguration, options) {
        return (0, exports.AdminApiFp)(this.configuration).setLogConfiguration(logger, logConfiguration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the value of a single configuration property.  This operation may fail for one of the following reasons:  * Property not found or not configured (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a configuration property
     * @param {string} propertyName The name of a configuration property.
     * @param {UpdateConfigurationProperty} updateConfigurationProperty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateConfigProperty(propertyName, updateConfigurationProperty, options) {
        return (0, exports.AdminApiFp)(this.configuration).updateConfigProperty(propertyName, updateConfigurationProperty, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the configuration for a globally configured rule.  This operation can fail for the following reasons:  * Invalid rule name/type (HTTP error `400`) * No rule with name/type `rule` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update global rule configuration
     * @param {RuleType} rule The unique name/type of a rule.
     * @param {Rule} rule2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateGlobalRuleConfig(rule, rule2, options) {
        return (0, exports.AdminApiFp)(this.configuration).updateGlobalRuleConfig(rule, rule2, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a single role mapping for one user/principal.  This operation can fail for the following reasons:  * No role mapping for the principalId exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update a role mapping
     * @param {string} principalId Unique id of a principal (typically either a user or service account).
     * @param {UpdateRole} updateRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updateRoleMapping(principalId, updateRole, options) {
        return (0, exports.AdminApiFp)(this.configuration).updateRoleMapping(principalId, updateRole, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AdminApi = AdminApi;
