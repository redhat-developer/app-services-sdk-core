"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Red Hat Openshift SmartEvents Fleet Manager V2
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SinkConnectorsApi = exports.SinkConnectorsApiFactory = exports.SinkConnectorsApiFp = exports.SinkConnectorsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SinkConnectorsApi - axios parameter creator
 * @export
 */
const SinkConnectorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Create a Sink Connector for a Bridge instance
         * @param {string} bridgeId
         * @param {ConnectorRequest} [connectorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSinkConnector: (bridgeId, connectorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('createSinkConnector', 'bridgeId', bridgeId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/sinks`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(connectorRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Delete a Sink Connector of a Bridge instance
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSinkConnector: (bridgeId, sinkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('deleteSinkConnector', 'bridgeId', bridgeId);
            // verify required parameter 'sinkId' is not null or undefined
            (0, common_1.assertParamExists)('deleteSinkConnector', 'sinkId', sinkId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/sinks/{sinkId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"sinkId"}}`, encodeURIComponent(String(sinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Get a Sink Connector of a Bridge instance
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinkConnector: (bridgeId, sinkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('getSinkConnector', 'bridgeId', bridgeId);
            // verify required parameter 'sinkId' is not null or undefined
            (0, common_1.assertParamExists)('getSinkConnector', 'sinkId', sinkId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/sinks/{sinkId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"sinkId"}}`, encodeURIComponent(String(sinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
         * @summary Get the list of Sink Connectors for a Bridge
         * @param {string} bridgeId
         * @param {string} [name]
         * @param {number} [page]
         * @param {number} [size]
         * @param {Set<ManagedResourceStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinkConnectors: (bridgeId, name, page, size, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('getSinkConnectors', 'bridgeId', bridgeId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/sinks`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Sink Connector instance for the authenticated user.
         * @summary Update a Sink Connector instance.
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {ConnectorRequest} [connectorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSinkConnector: (bridgeId, sinkId, connectorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('updateSinkConnector', 'bridgeId', bridgeId);
            // verify required parameter 'sinkId' is not null or undefined
            (0, common_1.assertParamExists)('updateSinkConnector', 'sinkId', sinkId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/sinks/{sinkId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"sinkId"}}`, encodeURIComponent(String(sinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(connectorRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SinkConnectorsApiAxiosParamCreator = SinkConnectorsApiAxiosParamCreator;
/**
 * SinkConnectorsApi - functional programming interface
 * @export
 */
const SinkConnectorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SinkConnectorsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Create a Sink Connector for a Bridge instance
         * @param {string} bridgeId
         * @param {ConnectorRequest} [connectorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSinkConnector(bridgeId, connectorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSinkConnector(bridgeId, connectorRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Delete a Sink Connector of a Bridge instance
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSinkConnector(bridgeId, sinkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSinkConnector(bridgeId, sinkId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Get a Sink Connector of a Bridge instance
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinkConnector(bridgeId, sinkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSinkConnector(bridgeId, sinkId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
         * @summary Get the list of Sink Connectors for a Bridge
         * @param {string} bridgeId
         * @param {string} [name]
         * @param {number} [page]
         * @param {number} [size]
         * @param {Set<ManagedResourceStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinkConnectors(bridgeId, name, page, size, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSinkConnectors(bridgeId, name, page, size, status, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update a Sink Connector instance for the authenticated user.
         * @summary Update a Sink Connector instance.
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {ConnectorRequest} [connectorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSinkConnector(bridgeId, sinkId, connectorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateSinkConnector(bridgeId, sinkId, connectorRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SinkConnectorsApiFp = SinkConnectorsApiFp;
/**
 * SinkConnectorsApi - factory interface
 * @export
 */
const SinkConnectorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SinkConnectorsApiFp)(configuration);
    return {
        /**
         * Create a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Create a Sink Connector for a Bridge instance
         * @param {string} bridgeId
         * @param {ConnectorRequest} [connectorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSinkConnector(bridgeId, connectorRequest, options) {
            return localVarFp.createSinkConnector(bridgeId, connectorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Delete a Sink Connector of a Bridge instance
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSinkConnector(bridgeId, sinkId, options) {
            return localVarFp.deleteSinkConnector(bridgeId, sinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Sink Connector of a Bridge instance for the authenticated user.
         * @summary Get a Sink Connector of a Bridge instance
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinkConnector(bridgeId, sinkId, options) {
            return localVarFp.getSinkConnector(bridgeId, sinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
         * @summary Get the list of Sink Connectors for a Bridge
         * @param {string} bridgeId
         * @param {string} [name]
         * @param {number} [page]
         * @param {number} [size]
         * @param {Set<ManagedResourceStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinkConnectors(bridgeId, name, page, size, status, options) {
            return localVarFp.getSinkConnectors(bridgeId, name, page, size, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Sink Connector instance for the authenticated user.
         * @summary Update a Sink Connector instance.
         * @param {string} bridgeId
         * @param {string} sinkId
         * @param {ConnectorRequest} [connectorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSinkConnector(bridgeId, sinkId, connectorRequest, options) {
            return localVarFp.updateSinkConnector(bridgeId, sinkId, connectorRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SinkConnectorsApiFactory = SinkConnectorsApiFactory;
/**
 * SinkConnectorsApi - object-oriented interface
 * @export
 * @class SinkConnectorsApi
 * @extends {BaseAPI}
 */
class SinkConnectorsApi extends base_1.BaseAPI {
    /**
     * Create a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Create a Sink Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    createSinkConnector(bridgeId, connectorRequest, options) {
        return (0, exports.SinkConnectorsApiFp)(this.configuration).createSinkConnector(bridgeId, connectorRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    deleteSinkConnector(bridgeId, sinkId, options) {
        return (0, exports.SinkConnectorsApiFp)(this.configuration).deleteSinkConnector(bridgeId, sinkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Get a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    getSinkConnector(bridgeId, sinkId, options) {
        return (0, exports.SinkConnectorsApiFp)(this.configuration).getSinkConnector(bridgeId, sinkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    getSinkConnectors(bridgeId, name, page, size, status, options) {
        return (0, exports.SinkConnectorsApiFp)(this.configuration).getSinkConnectors(bridgeId, name, page, size, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Sink Connector instance for the authenticated user.
     * @summary Update a Sink Connector instance.
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    updateSinkConnector(bridgeId, sinkId, connectorRequest, options) {
        return (0, exports.SinkConnectorsApiFp)(this.configuration).updateSinkConnector(bridgeId, sinkId, connectorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SinkConnectorsApi = SinkConnectorsApi;
