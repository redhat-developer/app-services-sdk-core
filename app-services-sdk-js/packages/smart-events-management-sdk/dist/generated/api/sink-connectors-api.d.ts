/**
 * Red Hat Openshift SmartEvents Fleet Manager V2
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ConnectorRequest } from '../model';
import { ManagedResourceStatus } from '../model';
import { SinkConnectorListResponse } from '../model';
import { SinkConnectorResponse } from '../model';
/**
 * SinkConnectorsApi - axios parameter creator
 * @export
 */
export declare const SinkConnectorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Create a Sink Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSinkConnector: (bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSinkConnector: (bridgeId: string, sinkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Get a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSinkConnector: (bridgeId: string, sinkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSinkConnectors: (bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Sink Connector instance for the authenticated user.
     * @summary Update a Sink Connector instance.
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSinkConnector: (bridgeId: string, sinkId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SinkConnectorsApi - functional programming interface
 * @export
 */
export declare const SinkConnectorsApiFp: (configuration?: Configuration) => {
    /**
     * Create a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Create a Sink Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSinkConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SinkConnectorResponse>>;
    /**
     * Delete a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSinkConnector(bridgeId: string, sinkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Get a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSinkConnector(bridgeId: string, sinkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SinkConnectorResponse>>;
    /**
     * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSinkConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SinkConnectorListResponse>>;
    /**
     * Update a Sink Connector instance for the authenticated user.
     * @summary Update a Sink Connector instance.
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSinkConnector(bridgeId: string, sinkId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SinkConnectorResponse>>;
};
/**
 * SinkConnectorsApi - factory interface
 * @export
 */
export declare const SinkConnectorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Create a Sink Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSinkConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: any): AxiosPromise<SinkConnectorResponse>;
    /**
     * Delete a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSinkConnector(bridgeId: string, sinkId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Get a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSinkConnector(bridgeId: string, sinkId: string, options?: any): AxiosPromise<SinkConnectorResponse>;
    /**
     * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSinkConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: any): AxiosPromise<SinkConnectorListResponse>;
    /**
     * Update a Sink Connector instance for the authenticated user.
     * @summary Update a Sink Connector instance.
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSinkConnector(bridgeId: string, sinkId: string, connectorRequest?: ConnectorRequest, options?: any): AxiosPromise<SinkConnectorResponse>;
};
/**
 * SinkConnectorsApi - interface
 * @export
 * @interface SinkConnectorsApi
 */
export interface SinkConnectorsApiInterface {
    /**
     * Create a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Create a Sink Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApiInterface
     */
    createSinkConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): AxiosPromise<SinkConnectorResponse>;
    /**
     * Delete a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApiInterface
     */
    deleteSinkConnector(bridgeId: string, sinkId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Get a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApiInterface
     */
    getSinkConnector(bridgeId: string, sinkId: string, options?: AxiosRequestConfig): AxiosPromise<SinkConnectorResponse>;
    /**
     * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApiInterface
     */
    getSinkConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): AxiosPromise<SinkConnectorListResponse>;
    /**
     * Update a Sink Connector instance for the authenticated user.
     * @summary Update a Sink Connector instance.
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApiInterface
     */
    updateSinkConnector(bridgeId: string, sinkId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): AxiosPromise<SinkConnectorResponse>;
}
/**
 * SinkConnectorsApi - object-oriented interface
 * @export
 * @class SinkConnectorsApi
 * @extends {BaseAPI}
 */
export declare class SinkConnectorsApi extends BaseAPI implements SinkConnectorsApiInterface {
    /**
     * Create a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Create a Sink Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    createSinkConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SinkConnectorResponse, any>>;
    /**
     * Delete a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    deleteSinkConnector(bridgeId: string, sinkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a Sink Connector of a Bridge instance for the authenticated user.
     * @summary Get a Sink Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    getSinkConnector(bridgeId: string, sinkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SinkConnectorResponse, any>>;
    /**
     * Get the list of Sink Connector instances of a Bridge instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    getSinkConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SinkConnectorListResponse, any>>;
    /**
     * Update a Sink Connector instance for the authenticated user.
     * @summary Update a Sink Connector instance.
     * @param {string} bridgeId
     * @param {string} sinkId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SinkConnectorsApi
     */
    updateSinkConnector(bridgeId: string, sinkId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SinkConnectorResponse, any>>;
}
