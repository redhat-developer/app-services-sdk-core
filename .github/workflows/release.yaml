name: Release all SDKs

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released as X.Y.Z'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'
      prerelease:
        description: 'Indicate wheater this is a pre-release'
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      # TS SDK
      - name: Use Node.js 16.3.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.3.0
          registry-url: "https://registry.npmjs.org"

      # Python SDK
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@a362e5fb42057a3a23a62218b050838f1bacca5d 

      # Python SDK
      - name: Use python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      # Java SDK
      #- name: Set up JDK 11
      #  uses: actions/setup-java@v3
      #  with:
      #    java-version: '11'
      #    distribution: 'temurin'
      #    check-latest: true
      #    server-id: ossrh
      #    server-username: MAVEN_USERNAME
      #    server-password: MAVEN_PASSWORD
      #    gpg-private-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
      #    gpg-passphrase: MAVEN_GPG_SECRET_KEY_PASSWORD

      # Java SDK
      #- id: install-secret-key
      #  name: Install gpg secret key for Java
      #  run: |
      #    cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
      #    gpg --list-secret-keys --keyid-format LONG

      # Python SDK
      - name: Install Poetry
        working-directory: app-services-sdk-python
        run: make install-setup

      # Java SDK
      #- name: Compile Java & run tests
      #  env:
      #    OFFLINE_TOKEN: ${{ secrets.OFFLINE_TOKEN }}
      #  working-directory: app-services-sdk-java
      #  run: mvn clean install

      # TS SDK
      - name: Compile TypeScript
        working-directory: app-services-sdk-ts
        run: |
          yarn install
          yarn build

      - name: Set git identity
        run: |
          git config user.name ci-bot
          git config user.email ci-bot@andreatp.

      # Python SDK
      - name: Update Pytohn to new version
        working-directory: app-services-sdk-python
        run: poetry version ${{ github.event.inputs.release-version }}
        
      # Java SDK
      #- name: Update Java to new version
      #  working-directory: app-services-sdk-java
      #  run:  mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${{ github.event.inputs.release-version }}

      # TS SDK
      - name: Update TypeScript package versions 
        run: VERSION=${{ github.event.inputs.release-version }} bash scripts/update-ts-packages.sh

      # Python SDK
      - name: Build Python modules
        working-directory: app-services-sdk-python
        run: make build

      # Python SDK
      - name: Move python dist folder
        run: cp -r app-services-sdk-python/dist .

      - name: Create branch and push tag
        run: |
          git checkout -b release-${{ github.event.inputs.release-version }}
          git add .
          git commit -m "Release version update ${{ github.event.inputs.release-version }}"
          git push origin release-${{ github.event.inputs.release-version }}
          git tag v${{ github.event.inputs.release-version }}
          git push origin v${{ github.event.inputs.release-version }}

      # Python SDK
      - name: Publish Python SDK
        uses: pypa/gh-action-pypi-publish@c7f29f7adef1a245bd91520e94867e5c6eedddcc #release/v1  
        with:
          password: ${{ secrets.RHOAS_PYPI_API_TOKEN }}

      # Java SDK
      #- name: Publish Java SDK
      #  working-directory: app-services-sdk-java
      #  run : mvn --batch-mode clean deploy -Prelease -DskipTests=true -e
      #  env:
      #    MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      #    MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      #    MAVEN_GPG_SECRET_KEY_PASSWORD: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}

      # TS SDK
      - name: Publish JS SDK
        working-directory: app-services-sdk-ts
        run: |
          npm publish --workspace=packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} #

      - name: Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          tag_name: v${{ github.event.inputs.release-version }}
          prerelease: ${{ github.event.inputs.prerelease }} 
