/*
Kafka Management API

Kafka Management API is a REST API to manage Kafka instances

API version: 1.16.0
Contact: rhosak-support@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkamgmtclient

import (
	"encoding/json"
)

// checks if the VersionMetadataAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionMetadataAllOf{}

// VersionMetadataAllOf struct for VersionMetadataAllOf
type VersionMetadataAllOf struct {
	ServerVersion *string `json:"server_version,omitempty"`
	Collections []ObjectReference `json:"collections,omitempty"`
}

// NewVersionMetadataAllOf instantiates a new VersionMetadataAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionMetadataAllOf() *VersionMetadataAllOf {
	this := VersionMetadataAllOf{}
	return &this
}

// NewVersionMetadataAllOfWithDefaults instantiates a new VersionMetadataAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionMetadataAllOfWithDefaults() *VersionMetadataAllOf {
	this := VersionMetadataAllOf{}
	return &this
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *VersionMetadataAllOf) GetServerVersion() string {
	if o == nil || IsNil(o.ServerVersion) {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMetadataAllOf) GetServerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVersion) {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *VersionMetadataAllOf) HasServerVersion() bool {
	if o != nil && !IsNil(o.ServerVersion) {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *VersionMetadataAllOf) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetCollections returns the Collections field value if set, zero value otherwise.
func (o *VersionMetadataAllOf) GetCollections() []ObjectReference {
	if o == nil || IsNil(o.Collections) {
		var ret []ObjectReference
		return ret
	}
	return o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMetadataAllOf) GetCollectionsOk() ([]ObjectReference, bool) {
	if o == nil || IsNil(o.Collections) {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *VersionMetadataAllOf) HasCollections() bool {
	if o != nil && !IsNil(o.Collections) {
		return true
	}

	return false
}

// SetCollections gets a reference to the given []ObjectReference and assigns it to the Collections field.
func (o *VersionMetadataAllOf) SetCollections(v []ObjectReference) {
	o.Collections = v
}

func (o VersionMetadataAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionMetadataAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerVersion) {
		toSerialize["server_version"] = o.ServerVersion
	}
	if !IsNil(o.Collections) {
		toSerialize["collections"] = o.Collections
	}
	return toSerialize, nil
}

type NullableVersionMetadataAllOf struct {
	value *VersionMetadataAllOf
	isSet bool
}

func (v NullableVersionMetadataAllOf) Get() *VersionMetadataAllOf {
	return v.value
}

func (v *NullableVersionMetadataAllOf) Set(val *VersionMetadataAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionMetadataAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionMetadataAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionMetadataAllOf(val *VersionMetadataAllOf) *NullableVersionMetadataAllOf {
	return &NullableVersionMetadataAllOf{value: val, isSet: true}
}

func (v NullableVersionMetadataAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionMetadataAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


