/*
Account Management Service API

Manage user subscriptions and clusters

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
	"time"
)

// checks if the SummaryVectorAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummaryVectorAllOf{}

// SummaryVectorAllOf struct for SummaryVectorAllOf
type SummaryVectorAllOf struct {
	Time *time.Time `json:"time,omitempty"`
	Value *float64 `json:"value,omitempty"`
}

// NewSummaryVectorAllOf instantiates a new SummaryVectorAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryVectorAllOf() *SummaryVectorAllOf {
	this := SummaryVectorAllOf{}
	return &this
}

// NewSummaryVectorAllOfWithDefaults instantiates a new SummaryVectorAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryVectorAllOfWithDefaults() *SummaryVectorAllOf {
	this := SummaryVectorAllOf{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *SummaryVectorAllOf) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryVectorAllOf) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *SummaryVectorAllOf) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *SummaryVectorAllOf) SetTime(v time.Time) {
	o.Time = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SummaryVectorAllOf) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummaryVectorAllOf) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SummaryVectorAllOf) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *SummaryVectorAllOf) SetValue(v float64) {
	o.Value = &v
}

func (o SummaryVectorAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummaryVectorAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSummaryVectorAllOf struct {
	value *SummaryVectorAllOf
	isSet bool
}

func (v NullableSummaryVectorAllOf) Get() *SummaryVectorAllOf {
	return v.value
}

func (v *NullableSummaryVectorAllOf) Set(val *SummaryVectorAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryVectorAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryVectorAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryVectorAllOf(val *SummaryVectorAllOf) *NullableSummaryVectorAllOf {
	return &NullableSummaryVectorAllOf{value: val, isSet: true}
}

func (v NullableSummaryVectorAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryVectorAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


