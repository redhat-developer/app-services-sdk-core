/*
Account Management Service API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package accountmgmtclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_accountmgmtclient_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdLabelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdLabelsKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyDelete(context.Background(), id, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdLabelsKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyGet(context.Background(), id, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdLabelsKeyPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyPatch(context.Background(), id, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdLabelsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1AccountsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1AccountsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1CertificatesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1CertificatesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1CloudResourcesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1CloudResourcesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1CloudResourcesIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1CloudResourcesIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1CloudResourcesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1CloudResourcesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1CloudResourcesIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1CloudResourcesIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1CloudResourcesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1CloudResourcesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ClusterAuthorizationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ClusterAuthorizationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ClusterRegistrationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ClusterRegistrationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ClusterTransfersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ClusterTransfersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ClusterTransfersIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ClusterTransfersIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ClusterTransfersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ClusterTransfersPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ConfigSkusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ConfigSkusGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ConfigSkusIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ConfigSkusIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ConfigSkusIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ConfigSkusIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ConfigSkusIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ConfigSkusIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ConfigSkusPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ConfigSkusPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1DeletedSubscriptionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1DeletedSubscriptionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ErrorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ErrorsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ErrorsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ErrorsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1FeatureTogglesIdQueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1FeatureTogglesIdQueryPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1LabelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1LabelsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1LandingPageSelfServiceGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1LandingPageSelfServiceGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1MetricsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1MetricsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1NotifyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1NotifyPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdLabelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(context.Background(), id, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet(context.Background(), id, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(context.Background(), id, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdLabelsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var acctGrpAsgnId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdDelete(context.Background(), orgId, acctGrpAsgnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var acctGrpAsgnId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsAcctGrpAsgnIdGet(context.Background(), orgId, acctGrpAsgnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupAssignmentsPost(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var acctGrpId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdDelete(context.Background(), orgId, acctGrpId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var acctGrpId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdGet(context.Background(), orgId, acctGrpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var acctGrpId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsAcctGrpIdPatch(context.Background(), orgId, acctGrpId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdAccountGroupsPost(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdConsumedQuotaGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var quotaId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(context.Background(), orgId, quotaId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var quotaId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(context.Background(), orgId, quotaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var quotaId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(context.Background(), orgId, quotaId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1OrganizationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1OrganizationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1PlansGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1PlansGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1PlansIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1PlansIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalResourceId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete(context.Background(), externalResourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1PullSecretsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1PullSecretsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotaCostGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotaCostGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotaRulesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotaRulesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotasGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotasGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotasIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotasIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotasIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotasIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotasIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotasIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1QuotasPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1QuotasPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistriesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistriesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistryCredentialsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistryCredentialsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistryCredentialsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistryCredentialsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistryCredentialsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RegistryCredentialsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RegistryCredentialsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ReservedResourcesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ReservedResourcesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1ResourceQuotaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1ResourceQuotaGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RoleBindingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RoleBindingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RoleBindingsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RoleBindingsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RoleBindingsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RoleBindingsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RoleBindingsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RoleBindingsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RoleBindingsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RoleBindingsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RolesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1RolesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1RolesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SelfEntitlementProductPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SelfEntitlementProductPost(context.Background(), product).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkuRulesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkuRulesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkuRulesIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkuRulesIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkuRulesIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkuRulesIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkuRulesIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkuRulesIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkuRulesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkuRulesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkusGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SkusIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SkusIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdLabelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(context.Background(), id, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(context.Background(), id, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var key string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(context.Background(), id, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdLabelsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var metricName string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdMetricsMetricNameGet(context.Background(), id, metricName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdNotifyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdNotifyPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdPatch(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string
		var accountId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(context.Background(), subId, accountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(context.Background(), subId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(context.Background(), subId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string
		var reservedResourceId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdDelete(context.Background(), subId, reservedResourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string
		var reservedResourceId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(context.Background(), subId, reservedResourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string
		var reservedResourceId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdPatch(context.Background(), subId, reservedResourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsGet(context.Background(), subId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var subId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdDelete(context.Background(), id, subId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var subId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsIdGet(context.Background(), id, subId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subId string

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdRoleBindingsPost(context.Background(), subId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SupportCasesCaseIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SupportCasesCaseIdDelete(context.Background(), caseId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1SupportCasesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1SupportCasesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAccountsMgmtV1TokenAuthorizationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAccountsMgmtV1TokenAuthorizationPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1AccessReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1AccessReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1CapabilityReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1CapabilityReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1ExportControlReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1ExportControlReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1FeatureReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1FeatureReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1ResourceReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1ResourceReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1SelfAccessReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1SelfAccessReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1SelfFeatureReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1SelfFeatureReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1SelfResourceReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1SelfResourceReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ApiAuthorizationsV1TermsReviewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ApiAuthorizationsV1TermsReviewPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
