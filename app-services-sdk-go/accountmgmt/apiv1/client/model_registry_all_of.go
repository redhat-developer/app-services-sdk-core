/*
Account Management Service API

Manage user subscriptions and clusters

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
	"time"
)

// checks if the RegistryAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistryAllOf{}

// RegistryAllOf struct for RegistryAllOf
type RegistryAllOf struct {
	CloudAlias *bool `json:"cloudAlias,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Name *string `json:"name,omitempty"`
	OrgName *string `json:"org_name,omitempty"`
	TeamName *string `json:"team_name,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewRegistryAllOf instantiates a new RegistryAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistryAllOf() *RegistryAllOf {
	this := RegistryAllOf{}
	return &this
}

// NewRegistryAllOfWithDefaults instantiates a new RegistryAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistryAllOfWithDefaults() *RegistryAllOf {
	this := RegistryAllOf{}
	return &this
}

// GetCloudAlias returns the CloudAlias field value if set, zero value otherwise.
func (o *RegistryAllOf) GetCloudAlias() bool {
	if o == nil || IsNil(o.CloudAlias) {
		var ret bool
		return ret
	}
	return *o.CloudAlias
}

// GetCloudAliasOk returns a tuple with the CloudAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetCloudAliasOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudAlias) {
		return nil, false
	}
	return o.CloudAlias, true
}

// HasCloudAlias returns a boolean if a field has been set.
func (o *RegistryAllOf) HasCloudAlias() bool {
	if o != nil && !IsNil(o.CloudAlias) {
		return true
	}

	return false
}

// SetCloudAlias gets a reference to the given bool and assigns it to the CloudAlias field.
func (o *RegistryAllOf) SetCloudAlias(v bool) {
	o.CloudAlias = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RegistryAllOf) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RegistryAllOf) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RegistryAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegistryAllOf) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegistryAllOf) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegistryAllOf) SetName(v string) {
	o.Name = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *RegistryAllOf) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *RegistryAllOf) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *RegistryAllOf) SetOrgName(v string) {
	o.OrgName = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *RegistryAllOf) GetTeamName() string {
	if o == nil || IsNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetTeamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *RegistryAllOf) HasTeamName() bool {
	if o != nil && !IsNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *RegistryAllOf) SetTeamName(v string) {
	o.TeamName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RegistryAllOf) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RegistryAllOf) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RegistryAllOf) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RegistryAllOf) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RegistryAllOf) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *RegistryAllOf) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RegistryAllOf) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAllOf) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RegistryAllOf) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RegistryAllOf) SetUrl(v string) {
	o.Url = &v
}

func (o RegistryAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistryAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudAlias) {
		toSerialize["cloudAlias"] = o.CloudAlias
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgName) {
		toSerialize["org_name"] = o.OrgName
	}
	if !IsNil(o.TeamName) {
		toSerialize["team_name"] = o.TeamName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRegistryAllOf struct {
	value *RegistryAllOf
	isSet bool
}

func (v NullableRegistryAllOf) Get() *RegistryAllOf {
	return v.value
}

func (v *NullableRegistryAllOf) Set(val *RegistryAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryAllOf(val *RegistryAllOf) *NullableRegistryAllOf {
	return &NullableRegistryAllOf{value: val, isSet: true}
}

func (v NullableRegistryAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


