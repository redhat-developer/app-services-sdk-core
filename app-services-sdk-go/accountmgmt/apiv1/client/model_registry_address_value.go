/*
Account Management Service API

Manage user subscriptions and clusters

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
)

// checks if the RegistryAddressValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistryAddressValue{}

// RegistryAddressValue struct for RegistryAddressValue
type RegistryAddressValue struct {
	Auth *string `json:"auth,omitempty"`
	Email *string `json:"email,omitempty"`
}

// NewRegistryAddressValue instantiates a new RegistryAddressValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistryAddressValue() *RegistryAddressValue {
	this := RegistryAddressValue{}
	return &this
}

// NewRegistryAddressValueWithDefaults instantiates a new RegistryAddressValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistryAddressValueWithDefaults() *RegistryAddressValue {
	this := RegistryAddressValue{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *RegistryAddressValue) GetAuth() string {
	if o == nil || IsNil(o.Auth) {
		var ret string
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAddressValue) GetAuthOk() (*string, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *RegistryAddressValue) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given string and assigns it to the Auth field.
func (o *RegistryAddressValue) SetAuth(v string) {
	o.Auth = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RegistryAddressValue) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryAddressValue) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RegistryAddressValue) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RegistryAddressValue) SetEmail(v string) {
	o.Email = &v
}

func (o RegistryAddressValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistryAddressValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableRegistryAddressValue struct {
	value *RegistryAddressValue
	isSet bool
}

func (v NullableRegistryAddressValue) Get() *RegistryAddressValue {
	return v.value
}

func (v *NullableRegistryAddressValue) Set(val *RegistryAddressValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryAddressValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryAddressValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryAddressValue(val *RegistryAddressValue) *NullableRegistryAddressValue {
	return &NullableRegistryAddressValue{value: val, isSet: true}
}

func (v NullableRegistryAddressValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryAddressValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


