/*
Account Management Service API

Manage user subscriptions and clusters

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
)

// checks if the PlanListAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanListAllOf{}

// PlanListAllOf struct for PlanListAllOf
type PlanListAllOf struct {
	Items []Plan `json:"items,omitempty"`
}

// NewPlanListAllOf instantiates a new PlanListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanListAllOf() *PlanListAllOf {
	this := PlanListAllOf{}
	return &this
}

// NewPlanListAllOfWithDefaults instantiates a new PlanListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanListAllOfWithDefaults() *PlanListAllOf {
	this := PlanListAllOf{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *PlanListAllOf) GetItems() []Plan {
	if o == nil || IsNil(o.Items) {
		var ret []Plan
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanListAllOf) GetItemsOk() ([]Plan, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *PlanListAllOf) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Plan and assigns it to the Items field.
func (o *PlanListAllOf) SetItems(v []Plan) {
	o.Items = v
}

func (o PlanListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanListAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullablePlanListAllOf struct {
	value *PlanListAllOf
	isSet bool
}

func (v NullablePlanListAllOf) Get() *PlanListAllOf {
	return v.value
}

func (v *NullablePlanListAllOf) Set(val *PlanListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanListAllOf(val *PlanListAllOf) *NullablePlanListAllOf {
	return &NullablePlanListAllOf{value: val, isSet: true}
}

func (v NullablePlanListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


