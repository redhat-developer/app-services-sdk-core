/*
Apicurio Registry API [v2]

Testing GlobalRulesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registryinstanceclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_registryinstanceclient_GlobalRulesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GlobalRulesApiService CreateGlobalRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.GlobalRulesApi.CreateGlobalRule(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GlobalRulesApiService DeleteAllGlobalRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.GlobalRulesApi.DeleteAllGlobalRules(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GlobalRulesApiService DeleteGlobalRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rule RuleType

		httpRes, err := apiClient.GlobalRulesApi.DeleteGlobalRule(context.Background(), rule).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GlobalRulesApiService GetGlobalRuleConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rule RuleType

		resp, httpRes, err := apiClient.GlobalRulesApi.GetGlobalRuleConfig(context.Background(), rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GlobalRulesApiService ListGlobalRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GlobalRulesApi.ListGlobalRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GlobalRulesApiService UpdateGlobalRuleConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rule RuleType

		resp, httpRes, err := apiClient.GlobalRulesApi.UpdateGlobalRuleConfig(context.Background(), rule).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
