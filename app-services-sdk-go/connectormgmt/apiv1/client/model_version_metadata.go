/*
Connector Management API

Connector Management API is a REST API to manage connectors.

API version: 0.1.0
Contact: rhosak-support@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// checks if the VersionMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionMetadata{}

// VersionMetadata struct for VersionMetadata
type VersionMetadata struct {
	Id *string `json:"id,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Href *string `json:"href,omitempty"`
	Collections []ObjectReference `json:"collections,omitempty"`
}

// NewVersionMetadata instantiates a new VersionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionMetadata() *VersionMetadata {
	this := VersionMetadata{}
	return &this
}

// NewVersionMetadataWithDefaults instantiates a new VersionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionMetadataWithDefaults() *VersionMetadata {
	this := VersionMetadata{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VersionMetadata) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMetadata) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VersionMetadata) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VersionMetadata) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *VersionMetadata) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMetadata) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *VersionMetadata) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *VersionMetadata) SetKind(v string) {
	o.Kind = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *VersionMetadata) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMetadata) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *VersionMetadata) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *VersionMetadata) SetHref(v string) {
	o.Href = &v
}

// GetCollections returns the Collections field value if set, zero value otherwise.
func (o *VersionMetadata) GetCollections() []ObjectReference {
	if o == nil || IsNil(o.Collections) {
		var ret []ObjectReference
		return ret
	}
	return o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionMetadata) GetCollectionsOk() ([]ObjectReference, bool) {
	if o == nil || IsNil(o.Collections) {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *VersionMetadata) HasCollections() bool {
	if o != nil && !IsNil(o.Collections) {
		return true
	}

	return false
}

// SetCollections gets a reference to the given []ObjectReference and assigns it to the Collections field.
func (o *VersionMetadata) SetCollections(v []ObjectReference) {
	o.Collections = v
}

func (o VersionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Collections) {
		toSerialize["collections"] = o.Collections
	}
	return toSerialize, nil
}

type NullableVersionMetadata struct {
	value *VersionMetadata
	isSet bool
}

func (v NullableVersionMetadata) Get() *VersionMetadata {
	return v.value
}

func (v *NullableVersionMetadata) Set(val *VersionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionMetadata(val *VersionMetadata) *NullableVersionMetadata {
	return &NullableVersionMetadata{value: val, isSet: true}
}

func (v NullableVersionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


