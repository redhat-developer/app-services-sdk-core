/*
Red Hat Openshift SmartEvents Fleet Manager V2

The API exposed by the fleet manager of the SmartEvents service.

API version: 0.0.1
Contact: openbridge-dev@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsmgmtclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CloudProvidersApi interface {

	/*
	CloudProviderAPIGetCloudProvider Get Cloud Provider.

	Get details of the Cloud Provider specified by id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCloudProviderAPIGetCloudProviderRequest
	*/
	CloudProviderAPIGetCloudProvider(ctx context.Context, id string) ApiCloudProviderAPIGetCloudProviderRequest

	// CloudProviderAPIGetCloudProviderExecute executes the request
	//  @return CloudProviderListResponse
	CloudProviderAPIGetCloudProviderExecute(r ApiCloudProviderAPIGetCloudProviderRequest) (*CloudProviderListResponse, *http.Response, error)

	/*
	CloudProviderAPIListCloudProviderRegions List Supported Cloud Regions.

	Returns the list of supported Regions of the specified Cloud Provider.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCloudProviderAPIListCloudProviderRegionsRequest
	*/
	CloudProviderAPIListCloudProviderRegions(ctx context.Context, id string) ApiCloudProviderAPIListCloudProviderRegionsRequest

	// CloudProviderAPIListCloudProviderRegionsExecute executes the request
	//  @return CloudRegionListResponse
	CloudProviderAPIListCloudProviderRegionsExecute(r ApiCloudProviderAPIListCloudProviderRegionsRequest) (*CloudRegionListResponse, *http.Response, error)

	/*
	CloudProviderAPIListCloudProviders List Supported Cloud Providers.

	Returns the list of supported Cloud Providers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCloudProviderAPIListCloudProvidersRequest
	*/
	CloudProviderAPIListCloudProviders(ctx context.Context) ApiCloudProviderAPIListCloudProvidersRequest

	// CloudProviderAPIListCloudProvidersExecute executes the request
	//  @return CloudProviderListResponse
	CloudProviderAPIListCloudProvidersExecute(r ApiCloudProviderAPIListCloudProvidersRequest) (*CloudProviderListResponse, *http.Response, error)
}

// CloudProvidersApiService CloudProvidersApi service
type CloudProvidersApiService service

type ApiCloudProviderAPIGetCloudProviderRequest struct {
	ctx context.Context
	ApiService CloudProvidersApi
	id string
}

func (r ApiCloudProviderAPIGetCloudProviderRequest) Execute() (*CloudProviderListResponse, *http.Response, error) {
	return r.ApiService.CloudProviderAPIGetCloudProviderExecute(r)
}

/*
CloudProviderAPIGetCloudProvider Get Cloud Provider.

Get details of the Cloud Provider specified by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiCloudProviderAPIGetCloudProviderRequest
*/
func (a *CloudProvidersApiService) CloudProviderAPIGetCloudProvider(ctx context.Context, id string) ApiCloudProviderAPIGetCloudProviderRequest {
	return ApiCloudProviderAPIGetCloudProviderRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudProviderListResponse
func (a *CloudProvidersApiService) CloudProviderAPIGetCloudProviderExecute(r ApiCloudProviderAPIGetCloudProviderRequest) (*CloudProviderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudProviderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudProvidersApiService.CloudProviderAPIGetCloudProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/smartevents_mgmt/v2/cloud_providers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 1 {
		return localVarReturnValue, nil, reportError("id must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudProviderAPIListCloudProviderRegionsRequest struct {
	ctx context.Context
	ApiService CloudProvidersApi
	id string
	page *int32
	size *int32
}

func (r ApiCloudProviderAPIListCloudProviderRegionsRequest) Page(page int32) ApiCloudProviderAPIListCloudProviderRegionsRequest {
	r.page = &page
	return r
}

func (r ApiCloudProviderAPIListCloudProviderRegionsRequest) Size(size int32) ApiCloudProviderAPIListCloudProviderRegionsRequest {
	r.size = &size
	return r
}

func (r ApiCloudProviderAPIListCloudProviderRegionsRequest) Execute() (*CloudRegionListResponse, *http.Response, error) {
	return r.ApiService.CloudProviderAPIListCloudProviderRegionsExecute(r)
}

/*
CloudProviderAPIListCloudProviderRegions List Supported Cloud Regions.

Returns the list of supported Regions of the specified Cloud Provider.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiCloudProviderAPIListCloudProviderRegionsRequest
*/
func (a *CloudProvidersApiService) CloudProviderAPIListCloudProviderRegions(ctx context.Context, id string) ApiCloudProviderAPIListCloudProviderRegionsRequest {
	return ApiCloudProviderAPIListCloudProviderRegionsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CloudRegionListResponse
func (a *CloudProvidersApiService) CloudProviderAPIListCloudProviderRegionsExecute(r ApiCloudProviderAPIListCloudProviderRegionsRequest) (*CloudRegionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudRegionListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudProvidersApiService.CloudProviderAPIListCloudProviderRegions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/smartevents_mgmt/v2/cloud_providers/{id}/regions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 1 {
		return localVarReturnValue, nil, reportError("id must have at least 1 elements")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudProviderAPIListCloudProvidersRequest struct {
	ctx context.Context
	ApiService CloudProvidersApi
	page *int32
	size *int32
}

func (r ApiCloudProviderAPIListCloudProvidersRequest) Page(page int32) ApiCloudProviderAPIListCloudProvidersRequest {
	r.page = &page
	return r
}

func (r ApiCloudProviderAPIListCloudProvidersRequest) Size(size int32) ApiCloudProviderAPIListCloudProvidersRequest {
	r.size = &size
	return r
}

func (r ApiCloudProviderAPIListCloudProvidersRequest) Execute() (*CloudProviderListResponse, *http.Response, error) {
	return r.ApiService.CloudProviderAPIListCloudProvidersExecute(r)
}

/*
CloudProviderAPIListCloudProviders List Supported Cloud Providers.

Returns the list of supported Cloud Providers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCloudProviderAPIListCloudProvidersRequest
*/
func (a *CloudProvidersApiService) CloudProviderAPIListCloudProviders(ctx context.Context) ApiCloudProviderAPIListCloudProvidersRequest {
	return ApiCloudProviderAPIListCloudProvidersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CloudProviderListResponse
func (a *CloudProvidersApiService) CloudProviderAPIListCloudProvidersExecute(r ApiCloudProviderAPIListCloudProvidersRequest) (*CloudProviderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CloudProviderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudProvidersApiService.CloudProviderAPIListCloudProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/smartevents_mgmt/v2/cloud_providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsList
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
