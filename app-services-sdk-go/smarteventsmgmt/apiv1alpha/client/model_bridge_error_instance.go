/*
Red Hat Openshift SmartEvents Fleet Manager V2

The API exposed by the fleet manager of the SmartEvents service.

API version: 0.0.1
Contact: openbridge-dev@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package smarteventsmgmtclient

import (
	"encoding/json"
)

// checks if the BridgeErrorInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BridgeErrorInstance{}

// BridgeErrorInstance struct for BridgeErrorInstance
type BridgeErrorInstance struct {
	Id *int32 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Type *BridgeErrorType `json:"type,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewBridgeErrorInstance instantiates a new BridgeErrorInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBridgeErrorInstance() *BridgeErrorInstance {
	this := BridgeErrorInstance{}
	return &this
}

// NewBridgeErrorInstanceWithDefaults instantiates a new BridgeErrorInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBridgeErrorInstanceWithDefaults() *BridgeErrorInstance {
	this := BridgeErrorInstance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BridgeErrorInstance) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeErrorInstance) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BridgeErrorInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BridgeErrorInstance) SetId(v int32) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BridgeErrorInstance) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeErrorInstance) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BridgeErrorInstance) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *BridgeErrorInstance) SetCode(v string) {
	o.Code = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *BridgeErrorInstance) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeErrorInstance) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *BridgeErrorInstance) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *BridgeErrorInstance) SetReason(v string) {
	o.Reason = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BridgeErrorInstance) GetType() BridgeErrorType {
	if o == nil || IsNil(o.Type) {
		var ret BridgeErrorType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeErrorInstance) GetTypeOk() (*BridgeErrorType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BridgeErrorInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BridgeErrorType and assigns it to the Type field.
func (o *BridgeErrorInstance) SetType(v BridgeErrorType) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *BridgeErrorInstance) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeErrorInstance) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *BridgeErrorInstance) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *BridgeErrorInstance) SetUuid(v string) {
	o.Uuid = &v
}

func (o BridgeErrorInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BridgeErrorInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

type NullableBridgeErrorInstance struct {
	value *BridgeErrorInstance
	isSet bool
}

func (v NullableBridgeErrorInstance) Get() *BridgeErrorInstance {
	return v.value
}

func (v *NullableBridgeErrorInstance) Set(val *BridgeErrorInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgeErrorInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgeErrorInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgeErrorInstance(val *BridgeErrorInstance) *NullableBridgeErrorInstance {
	return &NullableBridgeErrorInstance{value: val, isSet: true}
}

func (v NullableBridgeErrorInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgeErrorInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


