/*
Kafka Instance API

API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs

API version: 0.14.1-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// checks if the ConsumerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumerGroup{}

// ConsumerGroup struct for ConsumerGroup
type ConsumerGroup struct {
	// Unique identifier for the object. Not supported for all object kinds.
	Id *string `json:"id,omitempty"`
	Kind *string `json:"kind,omitempty"`
	// Link path to request the object. Not supported for all object kinds.
	Href *string `json:"href,omitempty"`
	// Unique identifier for the consumer group
	GroupId string `json:"groupId"`
	State *ConsumerGroupState `json:"state,omitempty"`
	// The list of consumers associated with this consumer group
	Consumers []Consumer `json:"consumers"`
	Metrics *ConsumerGroupMetrics `json:"metrics,omitempty"`
}

// NewConsumerGroup instantiates a new ConsumerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerGroup(groupId string, consumers []Consumer) *ConsumerGroup {
	this := ConsumerGroup{}
	this.GroupId = groupId
	this.Consumers = consumers
	return &this
}

// NewConsumerGroupWithDefaults instantiates a new ConsumerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerGroupWithDefaults() *ConsumerGroup {
	this := ConsumerGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConsumerGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConsumerGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConsumerGroup) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ConsumerGroup) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ConsumerGroup) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ConsumerGroup) SetKind(v string) {
	o.Kind = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ConsumerGroup) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ConsumerGroup) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ConsumerGroup) SetHref(v string) {
	o.Href = &v
}

// GetGroupId returns the GroupId field value
func (o *ConsumerGroup) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ConsumerGroup) SetGroupId(v string) {
	o.GroupId = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ConsumerGroup) GetState() ConsumerGroupState {
	if o == nil || IsNil(o.State) {
		var ret ConsumerGroupState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetStateOk() (*ConsumerGroupState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ConsumerGroup) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ConsumerGroupState and assigns it to the State field.
func (o *ConsumerGroup) SetState(v ConsumerGroupState) {
	o.State = &v
}

// GetConsumers returns the Consumers field value
func (o *ConsumerGroup) GetConsumers() []Consumer {
	if o == nil {
		var ret []Consumer
		return ret
	}

	return o.Consumers
}

// GetConsumersOk returns a tuple with the Consumers field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetConsumersOk() ([]Consumer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Consumers, true
}

// SetConsumers sets field value
func (o *ConsumerGroup) SetConsumers(v []Consumer) {
	o.Consumers = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *ConsumerGroup) GetMetrics() ConsumerGroupMetrics {
	if o == nil || IsNil(o.Metrics) {
		var ret ConsumerGroupMetrics
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroup) GetMetricsOk() (*ConsumerGroupMetrics, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *ConsumerGroup) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given ConsumerGroupMetrics and assigns it to the Metrics field.
func (o *ConsumerGroup) SetMetrics(v ConsumerGroupMetrics) {
	o.Metrics = &v
}

func (o ConsumerGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	// skip: kind is readOnly
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	toSerialize["groupId"] = o.GroupId
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["consumers"] = o.Consumers
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	return toSerialize, nil
}

type NullableConsumerGroup struct {
	value *ConsumerGroup
	isSet bool
}

func (v NullableConsumerGroup) Get() *ConsumerGroup {
	return v.value
}

func (v *NullableConsumerGroup) Set(val *ConsumerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerGroup(val *ConsumerGroup) *NullableConsumerGroup {
	return &NullableConsumerGroup{value: val, isSet: true}
}

func (v NullableConsumerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


