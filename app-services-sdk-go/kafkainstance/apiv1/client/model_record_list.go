/*
Kafka Instance API

API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs

API version: 0.13.1-SNAPSHOT
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// checks if the RecordList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordList{}

// RecordList struct for RecordList
type RecordList struct {
	Kind *string `json:"kind,omitempty"`
	// Total number of records returned in this request. This value does not indicate the total number of records in the topic.
	Total int32 `json:"total"`
	// Not used
	Size *int32 `json:"size,omitempty"`
	// Not used
	Page *int32 `json:"page,omitempty"`
	Items []Record `json:"items"`
}

// NewRecordList instantiates a new RecordList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordList(total int32, items []Record) *RecordList {
	this := RecordList{}
	this.Total = total
	this.Items = items
	return &this
}

// NewRecordListWithDefaults instantiates a new RecordList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordListWithDefaults() *RecordList {
	this := RecordList{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *RecordList) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordList) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *RecordList) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *RecordList) SetKind(v string) {
	o.Kind = &v
}

// GetTotal returns the Total field value
func (o *RecordList) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *RecordList) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *RecordList) SetTotal(v int32) {
	o.Total = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *RecordList) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordList) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *RecordList) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *RecordList) SetSize(v int32) {
	o.Size = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *RecordList) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordList) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *RecordList) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *RecordList) SetPage(v int32) {
	o.Page = &v
}

// GetItems returns the Items field value
func (o *RecordList) GetItems() []Record {
	if o == nil {
		var ret []Record
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *RecordList) GetItemsOk() ([]Record, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *RecordList) SetItems(v []Record) {
	o.Items = v
}

func (o RecordList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	toSerialize["total"] = o.Total
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

type NullableRecordList struct {
	value *RecordList
	isSet bool
}

func (v NullableRecordList) Get() *RecordList {
	return v.value
}

func (v *NullableRecordList) Set(val *RecordList) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordList) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordList(val *RecordList) *NullableRecordList {
	return &NullableRecordList{value: val, isSet: true}
}

func (v NullableRecordList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


