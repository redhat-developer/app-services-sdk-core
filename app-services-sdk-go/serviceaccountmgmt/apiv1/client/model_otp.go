/*
sso.redhat.com API documentation

This is the API documentation for sso.redhat.com

API version: 5.0.19-SNAPSHOT
Contact: it-user-team-list@redhat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceaccountsclient

import (
	"encoding/json"
)

// checks if the Otp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Otp{}

// Otp struct for Otp
type Otp struct {
	Required *bool `json:"required,omitempty"`
}

// NewOtp instantiates a new Otp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtp() *Otp {
	this := Otp{}
	return &this
}

// NewOtpWithDefaults instantiates a new Otp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtpWithDefaults() *Otp {
	this := Otp{}
	return &this
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *Otp) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Otp) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *Otp) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *Otp) SetRequired(v bool) {
	o.Required = &v
}

func (o Otp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Otp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableOtp struct {
	value *Otp
	isSet bool
}

func (v NullableOtp) Get() *Otp {
	return v.value
}

func (v *NullableOtp) Set(val *Otp) {
	v.value = val
	v.isSet = true
}

func (v NullableOtp) IsSet() bool {
	return v.isSet
}

func (v *NullableOtp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtp(val *Otp) *NullableOtp {
	return &NullableOtp{value: val, isSet: true}
}

func (v NullableOtp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


