"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * sso.redhat.com API documentation
 * This is the API documentation for sso.redhat.com
 *
 * The version of the OpenAPI document: 5.0.19-SNAPSHOT
 * Contact: it-user-team-list@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceAccountsApi = exports.ServiceAccountsApiFactory = exports.ServiceAccountsApiFp = exports.ServiceAccountsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ServiceAccountsApi - axios parameter creator
 * @export
 */
const ServiceAccountsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a service account. Created service account is associated with the user defined in the bearer token.
         * @summary Create service account
         * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount: (serviceAccountCreateRequestData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'serviceAccountCreateRequestData' is not null or undefined
            (0, common_1.assertParamExists)('createServiceAccount', 'serviceAccountCreateRequestData', serviceAccountCreateRequestData);
            const localVarPath = `/apis/service_accounts/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication authFlow required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "authFlow", ["api.iam.service_accounts"], configuration);
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.service_accounts"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceAccountCreateRequestData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Delete service account by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteServiceAccount', 'id', id);
            const localVarPath = `/apis/service_accounts/v1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication authFlow required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "authFlow", ["api.iam.service_accounts"], configuration);
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.service_accounts"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Get service account by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccount: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getServiceAccount', 'id', id);
            const localVarPath = `/apis/service_accounts/v1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication authFlow required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "authFlow", ["api.iam.service_accounts"], configuration);
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.service_accounts"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
         * @summary List all service accounts
         * @param {number} [first]
         * @param {number} [max]
         * @param {Set<string>} [clientId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccounts: (first, max, clientId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/apis/service_accounts/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication authFlow required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "authFlow", ["api.iam.service_accounts"], configuration);
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.service_accounts"], configuration);
            if (first !== undefined) {
                localVarQueryParameter['first'] = first;
            }
            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }
            if (clientId) {
                localVarQueryParameter['clientId'] = Array.from(clientId);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Reset service account secret by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountSecret: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('resetServiceAccountSecret', 'id', id);
            const localVarPath = `/apis/service_accounts/v1/{id}/resetSecret`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication authFlow required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "authFlow", ["api.iam.service_accounts"], configuration);
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.service_accounts"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a service account by id.
         * @summary Update service account
         * @param {string} id
         * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccount: (id, serviceAccountRequestData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateServiceAccount', 'id', id);
            // verify required parameter 'serviceAccountRequestData' is not null or undefined
            (0, common_1.assertParamExists)('updateServiceAccount', 'serviceAccountRequestData', serviceAccountRequestData);
            const localVarPath = `/apis/service_accounts/v1/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication authFlow required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "authFlow", ["api.iam.service_accounts"], configuration);
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.service_accounts"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceAccountRequestData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ServiceAccountsApiAxiosParamCreator = ServiceAccountsApiAxiosParamCreator;
/**
 * ServiceAccountsApi - functional programming interface
 * @export
 */
const ServiceAccountsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ServiceAccountsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a service account. Created service account is associated with the user defined in the bearer token.
         * @summary Create service account
         * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount(serviceAccountCreateRequestData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createServiceAccount(serviceAccountCreateRequestData, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Delete service account by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteServiceAccount(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Get service account by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccount(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getServiceAccount(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
         * @summary List all service accounts
         * @param {number} [first]
         * @param {number} [max]
         * @param {Set<string>} [clientId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccounts(first, max, clientId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getServiceAccounts(first, max, clientId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Reset service account secret by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountSecret(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetServiceAccountSecret(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update a service account by id.
         * @summary Update service account
         * @param {string} id
         * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccount(id, serviceAccountRequestData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateServiceAccount(id, serviceAccountRequestData, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ServiceAccountsApiFp = ServiceAccountsApiFp;
/**
 * ServiceAccountsApi - factory interface
 * @export
 */
const ServiceAccountsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ServiceAccountsApiFp)(configuration);
    return {
        /**
         * Create a service account. Created service account is associated with the user defined in the bearer token.
         * @summary Create service account
         * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount(serviceAccountCreateRequestData, options) {
            return localVarFp.createServiceAccount(serviceAccountCreateRequestData, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Delete service account by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount(id, options) {
            return localVarFp.deleteServiceAccount(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Get service account by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccount(id, options) {
            return localVarFp.getServiceAccount(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
         * @summary List all service accounts
         * @param {number} [first]
         * @param {number} [max]
         * @param {Set<string>} [clientId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccounts(first, max, clientId, options) {
            return localVarFp.getServiceAccounts(first, max, clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
         * @summary Reset service account secret by id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountSecret(id, options) {
            return localVarFp.resetServiceAccountSecret(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a service account by id.
         * @summary Update service account
         * @param {string} id
         * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccount(id, serviceAccountRequestData, options) {
            return localVarFp.updateServiceAccount(id, serviceAccountRequestData, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ServiceAccountsApiFactory = ServiceAccountsApiFactory;
/**
 * ServiceAccountsApi - object-oriented interface
 * @export
 * @class ServiceAccountsApi
 * @extends {BaseAPI}
 */
class ServiceAccountsApi extends base_1.BaseAPI {
    /**
     * Create a service account. Created service account is associated with the user defined in the bearer token.
     * @summary Create service account
     * @param {ServiceAccountCreateRequestData} serviceAccountCreateRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    createServiceAccount(serviceAccountCreateRequestData, options) {
        return (0, exports.ServiceAccountsApiFp)(this.configuration).createServiceAccount(serviceAccountCreateRequestData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Delete service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    deleteServiceAccount(id, options) {
        return (0, exports.ServiceAccountsApiFp)(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns service account by id. Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Get service account by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    getServiceAccount(id, options) {
        return (0, exports.ServiceAccountsApiFp)(this.configuration).getServiceAccount(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of service accounts created by a user. User information is obtained from the bearer token. The list is paginated with starting index as \'first\' and page size as \'max\'.
     * @summary List all service accounts
     * @param {number} [first]
     * @param {number} [max]
     * @param {Set<string>} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    getServiceAccounts(first, max, clientId, options) {
        return (0, exports.ServiceAccountsApiFp)(this.configuration).getServiceAccounts(first, max, clientId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reset service account secret by id . Throws not found exception if the service account is not found or the user does not have access to this service account
     * @summary Reset service account secret by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    resetServiceAccountSecret(id, options) {
        return (0, exports.ServiceAccountsApiFp)(this.configuration).resetServiceAccountSecret(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a service account by id.
     * @summary Update service account
     * @param {string} id
     * @param {ServiceAccountRequestData} serviceAccountRequestData \&#39;name\&#39; and \&#39;description\&#39; of the service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApi
     */
    updateServiceAccount(id, serviceAccountRequestData, options) {
        return (0, exports.ServiceAccountsApiFp)(this.configuration).updateServiceAccount(id, serviceAccountRequestData, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ServiceAccountsApi = ServiceAccountsApi;
