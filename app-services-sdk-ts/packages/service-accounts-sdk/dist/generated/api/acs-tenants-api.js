"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * sso.redhat.com API documentation
 * This is the API documentation for sso.redhat.com
 *
 * The version of the OpenAPI document: 5.0.19-SNAPSHOT
 * Contact: it-user-team-list@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcsTenantsApi = exports.AcsTenantsApiFactory = exports.AcsTenantsApiFp = exports.AcsTenantsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AcsTenantsApi - axios parameter creator
 * @export
 */
const AcsTenantsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
         * @summary Create ACS managed central client
         * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcsClient: (acsClientRequestData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'acsClientRequestData' is not null or undefined
            (0, common_1.assertParamExists)('createAcsClient', 'acsClientRequestData', acsClientRequestData);
            const localVarPath = `/apis/beta/acs/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.clients"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(acsClientRequestData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
         * @summary Delete ACS managed central client
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAcsClient: (clientId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'clientId' is not null or undefined
            (0, common_1.assertParamExists)('deleteAcsClient', 'clientId', clientId);
            const localVarPath = `/apis/beta/acs/v1/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication serviceAccounts required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "serviceAccounts", ["api.iam.clients"], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AcsTenantsApiAxiosParamCreator = AcsTenantsApiAxiosParamCreator;
/**
 * AcsTenantsApi - functional programming interface
 * @export
 */
const AcsTenantsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AcsTenantsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
         * @summary Create ACS managed central client
         * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcsClient(acsClientRequestData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAcsClient(acsClientRequestData, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
         * @summary Delete ACS managed central client
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAcsClient(clientId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAcsClient(clientId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AcsTenantsApiFp = AcsTenantsApiFp;
/**
 * AcsTenantsApi - factory interface
 * @export
 */
const AcsTenantsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AcsTenantsApiFp)(configuration);
    return {
        /**
         * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
         * @summary Create ACS managed central client
         * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAcsClient(acsClientRequestData, options) {
            return localVarFp.createAcsClient(acsClientRequestData, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
         * @summary Delete ACS managed central client
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAcsClient(clientId, options) {
            return localVarFp.deleteAcsClient(clientId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AcsTenantsApiFactory = AcsTenantsApiFactory;
/**
 * AcsTenantsApi - object-oriented interface
 * @export
 * @class AcsTenantsApi
 * @extends {BaseAPI}
 */
class AcsTenantsApi extends base_1.BaseAPI {
    /**
     * Create an ACS managed central client. Created ACS managed central clients are associated with the supplied organization id.
     * @summary Create ACS managed central client
     * @param {AcsClientRequestData} acsClientRequestData The name, redirect URIs and the organization id of the ACS managed central client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcsTenantsApi
     */
    createAcsClient(acsClientRequestData, options) {
        return (0, exports.AcsTenantsApiFp)(this.configuration).createAcsClient(acsClientRequestData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete ACS managed central client by clientId. Throws not found exception if the client is not found
     * @summary Delete ACS managed central client
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcsTenantsApi
     */
    deleteAcsClient(clientId, options) {
        return (0, exports.AcsTenantsApiFp)(this.configuration).deleteAcsClient(clientId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AcsTenantsApi = AcsTenantsApi;
