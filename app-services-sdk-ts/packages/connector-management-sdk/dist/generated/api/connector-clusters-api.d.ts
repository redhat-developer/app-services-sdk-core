/**
 * Connector Management API
 * Connector Management API is a REST API to manage connectors.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: rhosak-support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { AddonParameter } from '../model';
import { ConnectorCluster } from '../model';
import { ConnectorClusterList } from '../model';
import { ConnectorClusterRequest } from '../model';
import { ConnectorNamespaceList } from '../model';
/**
 * ConnectorClustersApi - axios parameter creator
 * @export
 */
export declare const ConnectorClustersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new connector cluster
     * @summary Create a new connector cluster
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {ConnectorClusterRequest} connectorClusterRequest Connector cluster data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectorCluster: (async: boolean, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a connector cluster
     * @summary Delete a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectorCluster: (connectorClusterId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a connector cluster
     * @summary Get a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorCluster: (connectorClusterId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a connector cluster\'s addon parameters
     * @summary Get a connector cluster\'s addon parameters
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {boolean} [resetCredentials] Resets cluster service account credentials when true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorClusterAddonParameters: (connectorClusterId: string, resetCredentials?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a connector cluster\'s namespaces
     * @summary Get a connector cluster\'s namespaces
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorClusterNamespaces: (connectorClusterId: string, page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of connector clusters
     * @summary Returns a list of connector clusters
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnectorClusters: (page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * udpate a connector cluster
     * @summary udpate a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {ConnectorClusterRequest} connectorClusterRequest Data to updated connector with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectorClusterById: (connectorClusterId: string, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConnectorClustersApi - functional programming interface
 * @export
 */
export declare const ConnectorClustersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new connector cluster
     * @summary Create a new connector cluster
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {ConnectorClusterRequest} connectorClusterRequest Connector cluster data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectorCluster(async: boolean, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorCluster>>;
    /**
     * Delete a connector cluster
     * @summary Delete a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectorCluster(connectorClusterId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>>;
    /**
     * Get a connector cluster
     * @summary Get a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorCluster(connectorClusterId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorCluster>>;
    /**
     * Get a connector cluster\'s addon parameters
     * @summary Get a connector cluster\'s addon parameters
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {boolean} [resetCredentials] Resets cluster service account credentials when true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorClusterAddonParameters(connectorClusterId: string, resetCredentials?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddonParameter>>>;
    /**
     * Get a connector cluster\'s namespaces
     * @summary Get a connector cluster\'s namespaces
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorClusterNamespaces(connectorClusterId: string, page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorNamespaceList>>;
    /**
     * Returns a list of connector clusters
     * @summary Returns a list of connector clusters
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnectorClusters(page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorClusterList>>;
    /**
     * udpate a connector cluster
     * @summary udpate a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {ConnectorClusterRequest} connectorClusterRequest Data to updated connector with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectorClusterById(connectorClusterId: string, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ConnectorClustersApi - factory interface
 * @export
 */
export declare const ConnectorClustersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new connector cluster
     * @summary Create a new connector cluster
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {ConnectorClusterRequest} connectorClusterRequest Connector cluster data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectorCluster(async: boolean, connectorClusterRequest: ConnectorClusterRequest, options?: any): AxiosPromise<ConnectorCluster>;
    /**
     * Delete a connector cluster
     * @summary Delete a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectorCluster(connectorClusterId: string, options?: any): AxiosPromise<Error>;
    /**
     * Get a connector cluster
     * @summary Get a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorCluster(connectorClusterId: string, options?: any): AxiosPromise<ConnectorCluster>;
    /**
     * Get a connector cluster\'s addon parameters
     * @summary Get a connector cluster\'s addon parameters
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {boolean} [resetCredentials] Resets cluster service account credentials when true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorClusterAddonParameters(connectorClusterId: string, resetCredentials?: boolean, options?: any): AxiosPromise<Array<AddonParameter>>;
    /**
     * Get a connector cluster\'s namespaces
     * @summary Get a connector cluster\'s namespaces
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorClusterNamespaces(connectorClusterId: string, page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<ConnectorNamespaceList>;
    /**
     * Returns a list of connector clusters
     * @summary Returns a list of connector clusters
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnectorClusters(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<ConnectorClusterList>;
    /**
     * udpate a connector cluster
     * @summary udpate a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {ConnectorClusterRequest} connectorClusterRequest Data to updated connector with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectorClusterById(connectorClusterId: string, connectorClusterRequest: ConnectorClusterRequest, options?: any): AxiosPromise<void>;
};
/**
 * ConnectorClustersApi - interface
 * @export
 * @interface ConnectorClustersApi
 */
export interface ConnectorClustersApiInterface {
    /**
     * Create a new connector cluster
     * @summary Create a new connector cluster
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {ConnectorClusterRequest} connectorClusterRequest Connector cluster data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    createConnectorCluster(async: boolean, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorCluster>;
    /**
     * Delete a connector cluster
     * @summary Delete a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    deleteConnectorCluster(connectorClusterId: string, options?: AxiosRequestConfig): AxiosPromise<Error>;
    /**
     * Get a connector cluster
     * @summary Get a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    getConnectorCluster(connectorClusterId: string, options?: AxiosRequestConfig): AxiosPromise<ConnectorCluster>;
    /**
     * Get a connector cluster\'s addon parameters
     * @summary Get a connector cluster\'s addon parameters
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {boolean} [resetCredentials] Resets cluster service account credentials when true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    getConnectorClusterAddonParameters(connectorClusterId: string, resetCredentials?: boolean, options?: AxiosRequestConfig): AxiosPromise<Array<AddonParameter>>;
    /**
     * Get a connector cluster\'s namespaces
     * @summary Get a connector cluster\'s namespaces
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    getConnectorClusterNamespaces(connectorClusterId: string, page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): AxiosPromise<ConnectorNamespaceList>;
    /**
     * Returns a list of connector clusters
     * @summary Returns a list of connector clusters
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    listConnectorClusters(page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): AxiosPromise<ConnectorClusterList>;
    /**
     * udpate a connector cluster
     * @summary udpate a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {ConnectorClusterRequest} connectorClusterRequest Data to updated connector with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApiInterface
     */
    updateConnectorClusterById(connectorClusterId: string, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * ConnectorClustersApi - object-oriented interface
 * @export
 * @class ConnectorClustersApi
 * @extends {BaseAPI}
 */
export declare class ConnectorClustersApi extends BaseAPI implements ConnectorClustersApiInterface {
    /**
     * Create a new connector cluster
     * @summary Create a new connector cluster
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {ConnectorClusterRequest} connectorClusterRequest Connector cluster data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    createConnectorCluster(async: boolean, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorCluster, any>>;
    /**
     * Delete a connector cluster
     * @summary Delete a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    deleteConnectorCluster(connectorClusterId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Error, any>>;
    /**
     * Get a connector cluster
     * @summary Get a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    getConnectorCluster(connectorClusterId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorCluster, any>>;
    /**
     * Get a connector cluster\'s addon parameters
     * @summary Get a connector cluster\'s addon parameters
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {boolean} [resetCredentials] Resets cluster service account credentials when true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    getConnectorClusterAddonParameters(connectorClusterId: string, resetCredentials?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddonParameter[], any>>;
    /**
     * Get a connector cluster\'s namespaces
     * @summary Get a connector cluster\'s namespaces
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    getConnectorClusterNamespaces(connectorClusterId: string, page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorNamespaceList, any>>;
    /**
     * Returns a list of connector clusters
     * @summary Returns a list of connector clusters
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the underlying resource fields supported in the search parameter. For example, to return all Connector types ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Connector types ordered by their name _and_ version, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, version asc &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of a SQL statement.  Allowed fields in the search depend on the resource type:  * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank, pricing_tier * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url  Allowed operators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed conjunctive operators are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 conjunctions in a search query.  Examples:  To return a Connector Type with the name &#x60;aws-sqs-source&#x60; and the channel &#x60;stable&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; aws-sqs-source and channel &#x3D; stable &#x60;&#x60;&#x60;  To return a connector instance with a name that starts with &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like aws%25 &#x60;&#x60;&#x60;  To return a connector type with a name containing &#x60;aws&#x60; matching any character case combination, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25aws%25 &#x60;&#x60;&#x60;  To return connector types with labels &#x60;category-featured&#x60; AND &#x60;source&#x60;, use the following syntax:  &#x60;&#x60;&#x60; label like %25category-featured%25source% &#x60;&#x60;&#x60;  NOTE: The AND operator does not work for multiple labels. Instead use an alphabetically ascending order pattern with the LIKE operator to match an aggregated list of \&#39;,\&#39; separated label names.  If the parameter isn\&#39;t provided, or if the value is empty, then all the resources that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    listConnectorClusters(page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorClusterList, any>>;
    /**
     * udpate a connector cluster
     * @summary udpate a connector cluster
     * @param {string} connectorClusterId The id of the connector cluster
     * @param {ConnectorClusterRequest} connectorClusterRequest Data to updated connector with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorClustersApi
     */
    updateConnectorClusterById(connectorClusterId: string, connectorClusterRequest: ConnectorClusterRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
