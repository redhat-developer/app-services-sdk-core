/**
 * Kafka Management API
 * Kafka Management API is a REST API to manage Kafka instances
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: rhosak-support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { CloudProviderList } from '../model';
import { CloudRegionList } from '../model';
import { KafkaPromoteRequest } from '../model';
import { KafkaRequest } from '../model';
import { KafkaRequestList } from '../model';
import { KafkaRequestPayload } from '../model';
import { KafkaUpdateRequest } from '../model';
import { MetricsInstantQueryList } from '../model';
import { MetricsRangeQueryList } from '../model';
import { SupportedKafkaInstanceTypesList } from '../model';
import { VersionMetadata } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a Kafka request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createKafka: (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a Kafka request by ID
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKafkaById: (id: string, async: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all metrics in scrapeable format for a given kafka id
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    federateMetrics: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the list of supported regions of the supported cloud provider
     * @param {string} id The ID of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProviderRegions: (id: string, page?: string, size?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the list of supported cloud providers
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProviders: (page?: string, size?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the list of supported Kafka instance types and sizes filtered by cloud provider and region
     * @param {string} cloudProvider ID of the supported cloud provider
     * @param {string} cloudRegion Name of the supported cloud provider region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstanceTypesByCloudProviderAndRegion: (cloudProvider: string, cloudRegion: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a Kafka request by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKafkaById: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the following &#x60;kafkaRequests&#x60; fields:  * bootstrap_server_host * admin_api_server_url * cloud_provider * cluster_id * created_at * href * id * instance_type * multi_az * name * organisation_id * owner * reauthentication_enabled * region * status * updated_at * version  For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, &#x60;status&#x60;, &#x60;instance_type&#x60;, and &#x60;cluster_id&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  To return a Kafka instance with a name containing &#x60;test&#x60; matching any character case combinations, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25test%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKafkas: (page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns metrics with instant query by Kafka ID
     * @param {string} id The ID of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsByInstantQuery: (id: string, filters?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns metrics with timeseries range query by Kafka ID
     * @param {string} id The ID of record
     * @param {number} duration The length of time in minutes for which to return the metrics
     * @param {number} interval The interval in seconds between data points
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsByRangeQuery: (id: string, duration: number, interval: number, filters?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the kafka Service Fleet Manager API version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionMetadata: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Promote a Kafka instance. Promotion is performed asynchronously. The `async` query parameter has to be set to `true`. Only kafka instances with an `eval` billing_model are supported
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner. False by default.
     * @param {KafkaPromoteRequest} kafkaPromoteRequest Kafka promotion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promoteKafka: (id: string, async: boolean, kafkaPromoteRequest: KafkaPromoteRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Kafka instance by id
     * @param {string} id The ID of record
     * @param {KafkaUpdateRequest} kafkaUpdateRequest Update owner of kafka
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKafkaById: (id: string, kafkaUpdateRequest: KafkaUpdateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     * Creates a Kafka request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>>;
    /**
     * Deletes a Kafka request by ID
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKafkaById(id: string, async: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>>;
    /**
     * Returns all metrics in scrapeable format for a given kafka id
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    federateMetrics(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Returns the list of supported regions of the supported cloud provider
     * @param {string} id The ID of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProviderRegions(id: string, page?: string, size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>>;
    /**
     * Returns the list of supported cloud providers
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProviders(page?: string, size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>>;
    /**
     * Returns the list of supported Kafka instance types and sizes filtered by cloud provider and region
     * @param {string} cloudProvider ID of the supported cloud provider
     * @param {string} cloudRegion Name of the supported cloud provider region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstanceTypesByCloudProviderAndRegion(cloudProvider: string, cloudRegion: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportedKafkaInstanceTypesList>>;
    /**
     * Returns a Kafka request by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKafkaById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>>;
    /**
     * Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the following &#x60;kafkaRequests&#x60; fields:  * bootstrap_server_host * admin_api_server_url * cloud_provider * cluster_id * created_at * href * id * instance_type * multi_az * name * organisation_id * owner * reauthentication_enabled * region * status * updated_at * version  For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, &#x60;status&#x60;, &#x60;instance_type&#x60;, and &#x60;cluster_id&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  To return a Kafka instance with a name containing &#x60;test&#x60; matching any character case combinations, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25test%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>>;
    /**
     * Returns metrics with instant query by Kafka ID
     * @param {string} id The ID of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>>;
    /**
     * Returns metrics with timeseries range query by Kafka ID
     * @param {string} id The ID of record
     * @param {number} duration The length of time in minutes for which to return the metrics
     * @param {number} interval The interval in seconds between data points
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>>;
    /**
     * Returns the kafka Service Fleet Manager API version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionMetadata(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionMetadata>>;
    /**
     * Promote a Kafka instance. Promotion is performed asynchronously. The `async` query parameter has to be set to `true`. Only kafka instances with an `eval` billing_model are supported
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner. False by default.
     * @param {KafkaPromoteRequest} kafkaPromoteRequest Kafka promotion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promoteKafka(id: string, async: boolean, kafkaPromoteRequest: KafkaPromoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a Kafka instance by id
     * @param {string} id The ID of record
     * @param {KafkaUpdateRequest} kafkaUpdateRequest Update owner of kafka
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKafkaById(id: string, kafkaUpdateRequest: KafkaUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a Kafka request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;
    /**
     * Deletes a Kafka request by ID
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;
    /**
     * Returns all metrics in scrapeable format for a given kafka id
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    federateMetrics(id: string, options?: any): AxiosPromise<string>;
    /**
     * Returns the list of supported regions of the supported cloud provider
     * @param {string} id The ID of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;
    /**
     * Returns the list of supported cloud providers
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;
    /**
     * Returns the list of supported Kafka instance types and sizes filtered by cloud provider and region
     * @param {string} cloudProvider ID of the supported cloud provider
     * @param {string} cloudRegion Name of the supported cloud provider region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstanceTypesByCloudProviderAndRegion(cloudProvider: string, cloudRegion: string, options?: any): AxiosPromise<SupportedKafkaInstanceTypesList>;
    /**
     * Returns a Kafka request by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;
    /**
     * Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the following &#x60;kafkaRequests&#x60; fields:  * bootstrap_server_host * admin_api_server_url * cloud_provider * cluster_id * created_at * href * id * instance_type * multi_az * name * organisation_id * owner * reauthentication_enabled * region * status * updated_at * version  For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, &#x60;status&#x60;, &#x60;instance_type&#x60;, and &#x60;cluster_id&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  To return a Kafka instance with a name containing &#x60;test&#x60; matching any character case combinations, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25test%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;
    /**
     * Returns metrics with instant query by Kafka ID
     * @param {string} id The ID of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;
    /**
     * Returns metrics with timeseries range query by Kafka ID
     * @param {string} id The ID of record
     * @param {number} duration The length of time in minutes for which to return the metrics
     * @param {number} interval The interval in seconds between data points
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;
    /**
     * Returns the kafka Service Fleet Manager API version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionMetadata(options?: any): AxiosPromise<VersionMetadata>;
    /**
     * Promote a Kafka instance. Promotion is performed asynchronously. The `async` query parameter has to be set to `true`. Only kafka instances with an `eval` billing_model are supported
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner. False by default.
     * @param {KafkaPromoteRequest} kafkaPromoteRequest Kafka promotion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promoteKafka(id: string, async: boolean, kafkaPromoteRequest: KafkaPromoteRequest, options?: any): AxiosPromise<void>;
    /**
     * Update a Kafka instance by id
     * @param {string} id The ID of record
     * @param {KafkaUpdateRequest} kafkaUpdateRequest Update owner of kafka
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateKafkaById(id: string, kafkaUpdateRequest: KafkaUpdateRequest, options?: any): AxiosPromise<KafkaRequest>;
};
/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Creates a Kafka request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: AxiosRequestConfig): AxiosPromise<KafkaRequest>;
    /**
     * Deletes a Kafka request by ID
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteKafkaById(id: string, async: boolean, options?: AxiosRequestConfig): AxiosPromise<Error>;
    /**
     * Returns all metrics in scrapeable format for a given kafka id
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    federateMetrics(id: string, options?: AxiosRequestConfig): AxiosPromise<string>;
    /**
     * Returns the list of supported regions of the supported cloud provider
     * @param {string} id The ID of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCloudProviderRegions(id: string, page?: string, size?: string, options?: AxiosRequestConfig): AxiosPromise<CloudRegionList>;
    /**
     * Returns the list of supported cloud providers
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCloudProviders(page?: string, size?: string, options?: AxiosRequestConfig): AxiosPromise<CloudProviderList>;
    /**
     * Returns the list of supported Kafka instance types and sizes filtered by cloud provider and region
     * @param {string} cloudProvider ID of the supported cloud provider
     * @param {string} cloudRegion Name of the supported cloud provider region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getInstanceTypesByCloudProviderAndRegion(cloudProvider: string, cloudRegion: string, options?: AxiosRequestConfig): AxiosPromise<SupportedKafkaInstanceTypesList>;
    /**
     * Returns a Kafka request by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getKafkaById(id: string, options?: AxiosRequestConfig): AxiosPromise<KafkaRequest>;
    /**
     * Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the following &#x60;kafkaRequests&#x60; fields:  * bootstrap_server_host * admin_api_server_url * cloud_provider * cluster_id * created_at * href * id * instance_type * multi_az * name * organisation_id * owner * reauthentication_enabled * region * status * updated_at * version  For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, &#x60;status&#x60;, &#x60;instance_type&#x60;, and &#x60;cluster_id&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  To return a Kafka instance with a name containing &#x60;test&#x60; matching any character case combinations, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25test%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): AxiosPromise<KafkaRequestList>;
    /**
     * Returns metrics with instant query by Kafka ID
     * @param {string} id The ID of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<MetricsInstantQueryList>;
    /**
     * Returns metrics with timeseries range query by Kafka ID
     * @param {string} id The ID of record
     * @param {number} duration The length of time in minutes for which to return the metrics
     * @param {number} interval The interval in seconds between data points
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<MetricsRangeQueryList>;
    /**
     * Returns the kafka Service Fleet Manager API version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getVersionMetadata(options?: AxiosRequestConfig): AxiosPromise<VersionMetadata>;
    /**
     * Promote a Kafka instance. Promotion is performed asynchronously. The `async` query parameter has to be set to `true`. Only kafka instances with an `eval` billing_model are supported
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner. False by default.
     * @param {KafkaPromoteRequest} kafkaPromoteRequest Kafka promotion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    promoteKafka(id: string, async: boolean, kafkaPromoteRequest: KafkaPromoteRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a Kafka instance by id
     * @param {string} id The ID of record
     * @param {KafkaUpdateRequest} kafkaUpdateRequest Update owner of kafka
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateKafkaById(id: string, kafkaUpdateRequest: KafkaUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<KafkaRequest>;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Creates a Kafka request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KafkaRequest, any>>;
    /**
     * Deletes a Kafka request by ID
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteKafkaById(id: string, async: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Error, any>>;
    /**
     * Returns all metrics in scrapeable format for a given kafka id
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    federateMetrics(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Returns the list of supported regions of the supported cloud provider
     * @param {string} id The ID of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCloudProviderRegions(id: string, page?: string, size?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CloudRegionList, any>>;
    /**
     * Returns the list of supported cloud providers
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getCloudProviders(page?: string, size?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CloudProviderList, any>>;
    /**
     * Returns the list of supported Kafka instance types and sizes filtered by cloud provider and region
     * @param {string} cloudProvider ID of the supported cloud provider
     * @param {string} cloudRegion Name of the supported cloud provider region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getInstanceTypesByCloudProviderAndRegion(cloudProvider: string, cloudRegion: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../model").SupportedKafkaInstanceTypesListAllOf, any>>;
    /**
     * Returns a Kafka request by ID
     * @param {string} id The ID of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getKafkaById(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KafkaRequest, any>>;
    /**
     * Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the following &#x60;kafkaRequests&#x60; fields:  * bootstrap_server_host * admin_api_server_url * cloud_provider * cluster_id * created_at * href * id * instance_type * multi_az * name * organisation_id * owner * reauthentication_enabled * region * status * updated_at * version  For example, to return all Kafka instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kafka instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results are ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, &#x60;status&#x60;, &#x60;instance_type&#x60;, and &#x60;cluster_id&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;IN&#x60;, &#x60;NOT IN&#x60;, &#x60;LIKE&#x60;, or &#x60;ILIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kafka instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To return a Kafka instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  To return a Kafka instance with a name containing &#x60;test&#x60; matching any character case combinations, use the following syntax:  &#x60;&#x60;&#x60; name ilike %25test%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the Kafka instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KafkaRequestList, any>>;
    /**
     * Returns metrics with instant query by Kafka ID
     * @param {string} id The ID of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../model").MetricsInstantQueryListAllOf, any>>;
    /**
     * Returns metrics with timeseries range query by Kafka ID
     * @param {string} id The ID of record
     * @param {number} duration The length of time in minutes for which to return the metrics
     * @param {number} interval The interval in seconds between data points
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are Kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<import("../model").MetricsRangeQueryListAllOf, any>>;
    /**
     * Returns the kafka Service Fleet Manager API version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getVersionMetadata(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VersionMetadata, any>>;
    /**
     * Promote a Kafka instance. Promotion is performed asynchronously. The `async` query parameter has to be set to `true`. Only kafka instances with an `eval` billing_model are supported
     * @param {string} id The ID of record
     * @param {boolean} async Perform the action in an asynchronous manner. False by default.
     * @param {KafkaPromoteRequest} kafkaPromoteRequest Kafka promotion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    promoteKafka(id: string, async: boolean, kafkaPromoteRequest: KafkaPromoteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a Kafka instance by id
     * @param {string} id The ID of record
     * @param {KafkaUpdateRequest} kafkaUpdateRequest Update owner of kafka
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateKafkaById(id: string, kafkaUpdateRequest: KafkaUpdateRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KafkaRequest, any>>;
}
