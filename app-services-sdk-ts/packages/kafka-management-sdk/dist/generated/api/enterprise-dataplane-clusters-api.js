"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kafka Management API
 * Kafka Management API is a REST API to manage Kafka instances
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: rhosak-support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnterpriseDataplaneClustersApi = exports.EnterpriseDataplaneClustersApiFactory = exports.EnterpriseDataplaneClustersApiFp = exports.EnterpriseDataplaneClustersApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * EnterpriseDataplaneClustersApi - axios parameter creator
 * @export
 */
const EnterpriseDataplaneClustersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnterpriseClusterById: (async, id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'async' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnterpriseClusterById', 'async', async);
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteEnterpriseClusterById', 'id', id);
            const localVarPath = `/api/kafkas_mgmt/v1/clusters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the addon parameters belonging to the enterprise dataplane cluster {id}
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseClusterAddonParameters: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getEnterpriseClusterAddonParameters', 'id', id);
            const localVarPath = `/api/kafkas_mgmt/v1/clusters/{id}/addon_parameters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns enterprise data plane cluster by ID
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseClusterById: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getEnterpriseClusterById', 'id', id);
            const localVarPath = `/api/kafkas_mgmt/v1/clusters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all Enterprise data plane clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseOsdClusters: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/kafkas_mgmt/v1/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Register enterprise data plane cluster
         * @param {EnterpriseOsdClusterPayload} enterpriseOsdClusterPayload Enterprise data plane cluster details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEnterpriseOsdCluster: (enterpriseOsdClusterPayload, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'enterpriseOsdClusterPayload' is not null or undefined
            (0, common_1.assertParamExists)('registerEnterpriseOsdCluster', 'enterpriseOsdClusterPayload', enterpriseOsdClusterPayload);
            const localVarPath = `/api/kafkas_mgmt/v1/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(enterpriseOsdClusterPayload, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.EnterpriseDataplaneClustersApiAxiosParamCreator = EnterpriseDataplaneClustersApiAxiosParamCreator;
/**
 * EnterpriseDataplaneClustersApi - functional programming interface
 * @export
 */
const EnterpriseDataplaneClustersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EnterpriseDataplaneClustersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnterpriseClusterById(async, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteEnterpriseClusterById(async, id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the addon parameters belonging to the enterprise dataplane cluster {id}
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseClusterAddonParameters(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnterpriseClusterAddonParameters(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns enterprise data plane cluster by ID
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseClusterById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnterpriseClusterById(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * List all Enterprise data plane clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseOsdClusters(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getEnterpriseOsdClusters(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Register enterprise data plane cluster
         * @param {EnterpriseOsdClusterPayload} enterpriseOsdClusterPayload Enterprise data plane cluster details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEnterpriseOsdCluster(enterpriseOsdClusterPayload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.registerEnterpriseOsdCluster(enterpriseOsdClusterPayload, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.EnterpriseDataplaneClustersApiFp = EnterpriseDataplaneClustersApiFp;
/**
 * EnterpriseDataplaneClustersApi - factory interface
 * @export
 */
const EnterpriseDataplaneClustersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EnterpriseDataplaneClustersApiFp)(configuration);
    return {
        /**
         *
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnterpriseClusterById(async, id, options) {
            return localVarFp.deleteEnterpriseClusterById(async, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the addon parameters belonging to the enterprise dataplane cluster {id}
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseClusterAddonParameters(id, options) {
            return localVarFp.getEnterpriseClusterAddonParameters(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns enterprise data plane cluster by ID
         * @param {string} id ID of the enterprise data plane cluster
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseClusterById(id, options) {
            return localVarFp.getEnterpriseClusterById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Enterprise data plane clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseOsdClusters(options) {
            return localVarFp.getEnterpriseOsdClusters(options).then((request) => request(axios, basePath));
        },
        /**
         * Register enterprise data plane cluster
         * @param {EnterpriseOsdClusterPayload} enterpriseOsdClusterPayload Enterprise data plane cluster details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerEnterpriseOsdCluster(enterpriseOsdClusterPayload, options) {
            return localVarFp.registerEnterpriseOsdCluster(enterpriseOsdClusterPayload, options).then((request) => request(axios, basePath));
        },
    };
};
exports.EnterpriseDataplaneClustersApiFactory = EnterpriseDataplaneClustersApiFactory;
/**
 * EnterpriseDataplaneClustersApi - object-oriented interface
 * @export
 * @class EnterpriseDataplaneClustersApi
 * @extends {BaseAPI}
 */
class EnterpriseDataplaneClustersApi extends base_1.BaseAPI {
    /**
     *
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {string} id ID of the enterprise data plane cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseDataplaneClustersApi
     */
    deleteEnterpriseClusterById(async, id, options) {
        return (0, exports.EnterpriseDataplaneClustersApiFp)(this.configuration).deleteEnterpriseClusterById(async, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the addon parameters belonging to the enterprise dataplane cluster {id}
     * @param {string} id ID of the enterprise data plane cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseDataplaneClustersApi
     */
    getEnterpriseClusterAddonParameters(id, options) {
        return (0, exports.EnterpriseDataplaneClustersApiFp)(this.configuration).getEnterpriseClusterAddonParameters(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns enterprise data plane cluster by ID
     * @param {string} id ID of the enterprise data plane cluster
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseDataplaneClustersApi
     */
    getEnterpriseClusterById(id, options) {
        return (0, exports.EnterpriseDataplaneClustersApiFp)(this.configuration).getEnterpriseClusterById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all Enterprise data plane clusters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseDataplaneClustersApi
     */
    getEnterpriseOsdClusters(options) {
        return (0, exports.EnterpriseDataplaneClustersApiFp)(this.configuration).getEnterpriseOsdClusters(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register enterprise data plane cluster
     * @param {EnterpriseOsdClusterPayload} enterpriseOsdClusterPayload Enterprise data plane cluster details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseDataplaneClustersApi
     */
    registerEnterpriseOsdCluster(enterpriseOsdClusterPayload, options) {
        return (0, exports.EnterpriseDataplaneClustersApiFp)(this.configuration).registerEnterpriseOsdCluster(enterpriseOsdClusterPayload, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnterpriseDataplaneClustersApi = EnterpriseDataplaneClustersApi;
