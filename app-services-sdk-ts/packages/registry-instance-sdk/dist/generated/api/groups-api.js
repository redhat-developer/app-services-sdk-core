"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupsApi = exports.GroupsApiFactory = exports.GroupsApiFp = exports.GroupsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * GroupsApi - axios parameter creator
 * @export
 */
const GroupsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new group.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group already exist (HTTP error `409`)
         * @summary Create a new group
         * @param {CreateGroupMetaData} createGroupMetaData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: (createGroupMetaData, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'createGroupMetaData' is not null or undefined
            (0, common_1.assertParamExists)('createGroup', 'createGroupMetaData', createGroupMetaData);
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createGroupMetaData, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a group by identifier.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group does not exist (HTTP error `404`)
         * @summary Delete a group by the specified ID.
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupById: (groupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('deleteGroupById', 'groupId', groupId);
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a group using the specified id.  This operation can fail for the following reasons:  * No group exists with the specified ID (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get a group by the specified ID.
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById: (groupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('getGroupById', 'groupId', groupId);
            const localVarPath = `/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all groups.  This list is paged.
         * @summary List groups
         * @param {number} [limit] The number of groups to return.  Defaults to 20.
         * @param {number} [offset] The number of groups to skip before starting the result set.  Defaults to 0.
         * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
         * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: (limit, offset, order, orderby, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.GroupsApiAxiosParamCreator = GroupsApiAxiosParamCreator;
/**
 * GroupsApi - functional programming interface
 * @export
 */
const GroupsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.GroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new group.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group already exist (HTTP error `409`)
         * @summary Create a new group
         * @param {CreateGroupMetaData} createGroupMetaData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(createGroupMetaData, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createGroup(createGroupMetaData, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes a group by identifier.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group does not exist (HTTP error `404`)
         * @summary Delete a group by the specified ID.
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupById(groupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGroupById(groupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a group using the specified id.  This operation can fail for the following reasons:  * No group exists with the specified ID (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get a group by the specified ID.
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(groupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGroupById(groupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all groups.  This list is paged.
         * @summary List groups
         * @param {number} [limit] The number of groups to return.  Defaults to 20.
         * @param {number} [offset] The number of groups to skip before starting the result set.  Defaults to 0.
         * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
         * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(limit, offset, order, orderby, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listGroups(limit, offset, order, orderby, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.GroupsApiFp = GroupsApiFp;
/**
 * GroupsApi - factory interface
 * @export
 */
const GroupsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.GroupsApiFp)(configuration);
    return {
        /**
         * Creates a new group.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group already exist (HTTP error `409`)
         * @summary Create a new group
         * @param {CreateGroupMetaData} createGroupMetaData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(createGroupMetaData, options) {
            return localVarFp.createGroup(createGroupMetaData, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a group by identifier.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group does not exist (HTTP error `404`)
         * @summary Delete a group by the specified ID.
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupById(groupId, options) {
            return localVarFp.deleteGroupById(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a group using the specified id.  This operation can fail for the following reasons:  * No group exists with the specified ID (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get a group by the specified ID.
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(groupId, options) {
            return localVarFp.getGroupById(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all groups.  This list is paged.
         * @summary List groups
         * @param {number} [limit] The number of groups to return.  Defaults to 20.
         * @param {number} [offset] The number of groups to skip before starting the result set.  Defaults to 0.
         * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
         * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(limit, offset, order, orderby, options) {
            return localVarFp.listGroups(limit, offset, order, orderby, options).then((request) => request(axios, basePath));
        },
    };
};
exports.GroupsApiFactory = GroupsApiFactory;
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
class GroupsApi extends base_1.BaseAPI {
    /**
     * Creates a new group.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group already exist (HTTP error `409`)
     * @summary Create a new group
     * @param {CreateGroupMetaData} createGroupMetaData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    createGroup(createGroupMetaData, options) {
        return (0, exports.GroupsApiFp)(this.configuration).createGroup(createGroupMetaData, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a group by identifier.  This operation can fail for the following reasons:  * A server error occurred (HTTP error `500`) * The group does not exist (HTTP error `404`)
     * @summary Delete a group by the specified ID.
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    deleteGroupById(groupId, options) {
        return (0, exports.GroupsApiFp)(this.configuration).deleteGroupById(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a group using the specified id.  This operation can fail for the following reasons:  * No group exists with the specified ID (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get a group by the specified ID.
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    getGroupById(groupId, options) {
        return (0, exports.GroupsApiFp)(this.configuration).getGroupById(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all groups.  This list is paged.
     * @summary List groups
     * @param {number} [limit] The number of groups to return.  Defaults to 20.
     * @param {number} [offset] The number of groups to skip before starting the result set.  Defaults to 0.
     * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
     * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    listGroups(limit, offset, order, orderby, options) {
        return (0, exports.GroupsApiFp)(this.configuration).listGroups(limit, offset, order, orderby, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GroupsApi = GroupsApi;
