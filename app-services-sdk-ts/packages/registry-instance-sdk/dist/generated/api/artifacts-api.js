"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`.
 *
 * The version of the OpenAPI document: 2.4.x
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactsApi = exports.ArtifactsApiFactory = exports.ArtifactsApiFp = exports.ArtifactsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ArtifactsApi - axios parameter creator
 * @export
 */
const ArtifactsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request\'s `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Create artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {any} body The content of the artifact being created. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryArtifactType] Specifies the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryArtifactId] A client-provided, globally unique identifier for the new artifact.
         * @param {string} [xRegistryVersion] Specifies the version number of this initial version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically (starting with version &#x60;1&#x60;).
         * @param {IfExists} [ifExists] Set this option to instruct the server on what to do if the artifact already exists.
         * @param {boolean} [canonical] Used only when the &#x60;ifExists&#x60; query parameter is set to &#x60;RETURN_OR_UPDATE&#x60;, this parameter can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
         * @param {string} [xRegistryDescription] Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryDescriptionEncoded] Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryName] Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryNameEncoded] Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryContentHash] Specifies the (optional) hash of the artifact to be verified.
         * @param {'SHA256' | 'MD5'} [xRegistryHashAlgorithm] The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
         * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifact: (groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('createArtifact', 'groupId', groupId);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('createArtifact', 'body', body);
            const localVarPath = `/groups/{groupId}/artifacts`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (ifExists !== undefined) {
                localVarQueryParameter['ifExists'] = ifExists;
            }
            if (canonical !== undefined) {
                localVarQueryParameter['canonical'] = canonical;
            }
            if (xRegistryArtifactType !== undefined && xRegistryArtifactType !== null) {
                localVarHeaderParameter['X-Registry-ArtifactType'] = String(xRegistryArtifactType);
            }
            if (xRegistryArtifactId !== undefined && xRegistryArtifactId !== null) {
                localVarHeaderParameter['X-Registry-ArtifactId'] = String(xRegistryArtifactId);
            }
            if (xRegistryVersion !== undefined && xRegistryVersion !== null) {
                localVarHeaderParameter['X-Registry-Version'] = String(xRegistryVersion);
            }
            if (xRegistryDescription !== undefined && xRegistryDescription !== null) {
                localVarHeaderParameter['X-Registry-Description'] = String(xRegistryDescription);
            }
            if (xRegistryDescriptionEncoded !== undefined && xRegistryDescriptionEncoded !== null) {
                localVarHeaderParameter['X-Registry-Description-Encoded'] = String(xRegistryDescriptionEncoded);
            }
            if (xRegistryName !== undefined && xRegistryName !== null) {
                localVarHeaderParameter['X-Registry-Name'] = String(xRegistryName);
            }
            if (xRegistryNameEncoded !== undefined && xRegistryNameEncoded !== null) {
                localVarHeaderParameter['X-Registry-Name-Encoded'] = String(xRegistryNameEncoded);
            }
            if (xRegistryContentHash !== undefined && xRegistryContentHash !== null) {
                localVarHeaderParameter['X-Registry-Content-Hash'] = String(xRegistryContentHash);
            }
            if (xRegistryHashAlgorithm !== undefined && xRegistryHashAlgorithm !== null) {
                localVarHeaderParameter['X-Registry-Hash-Algorithm'] = String(xRegistryHashAlgorithm);
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Delete artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: (groupId, artifactId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('deleteArtifact', 'groupId', groupId);
            // verify required parameter 'artifactId' is not null or undefined
            (0, common_1.assertParamExists)('deleteArtifact', 'artifactId', artifactId);
            const localVarPath = `/groups/{groupId}/artifacts/{artifactId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"artifactId"}}`, encodeURIComponent(String(artifactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes all of the artifacts that exist in a given group.
         * @summary Delete artifacts in group
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactsInGroup: (groupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('deleteArtifactsInGroup', 'groupId', groupId);
            const localVarPath = `/groups/{groupId}/artifacts`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact by global ID
         * @param {number} globalId Global identifier for an artifact version.
         * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByGlobalId: (globalId, dereference, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'globalId' is not null or undefined
            (0, common_1.assertParamExists)('getContentByGlobalId', 'globalId', globalId);
            const localVarPath = `/ids/globalIds/{globalId}`
                .replace(`{${"globalId"}}`, encodeURIComponent(String(globalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dereference !== undefined) {
                localVarQueryParameter['dereference'] = dereference;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact content by SHA-256 hash
         * @param {string} contentHash SHA-256 content hash for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByHash: (contentHash, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contentHash' is not null or undefined
            (0, common_1.assertParamExists)('getContentByHash', 'contentHash', contentHash);
            const localVarPath = `/ids/contentHashes/{contentHash}/`
                .replace(`{${"contentHash"}}`, encodeURIComponent(String(contentHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact content by ID
         * @param {number} contentId Global identifier for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById: (contentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contentId' is not null or undefined
            (0, common_1.assertParamExists)('getContentById', 'contentId', contentId);
            const localVarPath = `/ids/contentIds/{contentId}/`
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`). If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get latest artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestArtifact: (groupId, artifactId, dereference, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('getLatestArtifact', 'groupId', groupId);
            // verify required parameter 'artifactId' is not null or undefined
            (0, common_1.assertParamExists)('getLatestArtifact', 'artifactId', artifactId);
            const localVarPath = `/groups/{groupId}/artifacts/{artifactId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"artifactId"}}`, encodeURIComponent(String(artifactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (dereference !== undefined) {
                localVarQueryParameter['dereference'] = dereference;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all artifacts in the group.  This list is paged.
         * @summary List artifacts in group
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {number} [limit] The number of artifacts to return.  Defaults to 20.
         * @param {number} [offset] The number of artifacts to skip before starting the result set.  Defaults to 0.
         * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
         * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactsInGroup: (groupId, limit, offset, order, orderby, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('listArtifactsInGroup', 'groupId', groupId);
            const localVarPath = `/groups/{groupId}/artifacts`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list containing all the artifact references using the artifact content hash.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by hash
         * @param {string} contentHash SHA-256 content hash for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByContentHash: (contentHash, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contentHash' is not null or undefined
            (0, common_1.assertParamExists)('referencesByContentHash', 'contentHash', contentHash);
            const localVarPath = `/ids/contentHashes/{contentHash}/references`
                .replace(`{${"contentHash"}}`, encodeURIComponent(String(contentHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list containing all the artifact references using the artifact content ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by content ID
         * @param {number} contentId Global identifier for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByContentId: (contentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'contentId' is not null or undefined
            (0, common_1.assertParamExists)('referencesByContentId', 'contentId', contentId);
            const localVarPath = `/ids/contentIds/{contentId}/references`
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list containing all the artifact references using the artifact global ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by global ID
         * @param {number} globalId Global identifier for an artifact version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByGlobalId: (globalId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'globalId' is not null or undefined
            (0, common_1.assertParamExists)('referencesByGlobalId', 'globalId', globalId);
            const localVarPath = `/ids/globalIds/{globalId}/references`
                .replace(`{${"globalId"}}`, encodeURIComponent(String(globalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an artifact by uploading new content.  The body of the request can be the raw content of the artifact or a JSON object containing both the raw content and a set of references to other artifacts..  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact\'s type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
         * @summary Update artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {any} body The new content of the artifact being updated. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryVersion] Specifies the version number of this new version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically.
         * @param {string} [xRegistryName] Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryNameEncoded] Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryDescription] Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryDescriptionEncoded] Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifact: (groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('updateArtifact', 'groupId', groupId);
            // verify required parameter 'artifactId' is not null or undefined
            (0, common_1.assertParamExists)('updateArtifact', 'artifactId', artifactId);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('updateArtifact', 'body', body);
            const localVarPath = `/groups/{groupId}/artifacts/{artifactId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"artifactId"}}`, encodeURIComponent(String(artifactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xRegistryVersion !== undefined && xRegistryVersion !== null) {
                localVarHeaderParameter['X-Registry-Version'] = String(xRegistryVersion);
            }
            if (xRegistryName !== undefined && xRegistryName !== null) {
                localVarHeaderParameter['X-Registry-Name'] = String(xRegistryName);
            }
            if (xRegistryNameEncoded !== undefined && xRegistryNameEncoded !== null) {
                localVarHeaderParameter['X-Registry-Name-Encoded'] = String(xRegistryNameEncoded);
            }
            if (xRegistryDescription !== undefined && xRegistryDescription !== null) {
                localVarHeaderParameter['X-Registry-Description'] = String(xRegistryDescription);
            }
            if (xRegistryDescriptionEncoded !== undefined && xRegistryDescriptionEncoded !== null) {
                localVarHeaderParameter['X-Registry-Description-Encoded'] = String(xRegistryDescriptionEncoded);
            }
            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`. The operation changes the state of the latest version of the artifact, even if this version is `DISABLED`. If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update artifact state
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {UpdateState} updateState
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactState: (groupId, artifactId, updateState, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'groupId' is not null or undefined
            (0, common_1.assertParamExists)('updateArtifactState', 'groupId', groupId);
            // verify required parameter 'artifactId' is not null or undefined
            (0, common_1.assertParamExists)('updateArtifactState', 'artifactId', artifactId);
            // verify required parameter 'updateState' is not null or undefined
            (0, common_1.assertParamExists)('updateArtifactState', 'updateState', updateState);
            const localVarPath = `/groups/{groupId}/artifacts/{artifactId}/state`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)))
                .replace(`{${"artifactId"}}`, encodeURIComponent(String(artifactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateState, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ArtifactsApiAxiosParamCreator = ArtifactsApiAxiosParamCreator;
/**
 * ArtifactsApi - functional programming interface
 * @export
 */
const ArtifactsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ArtifactsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request\'s `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Create artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {any} body The content of the artifact being created. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryArtifactType] Specifies the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryArtifactId] A client-provided, globally unique identifier for the new artifact.
         * @param {string} [xRegistryVersion] Specifies the version number of this initial version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically (starting with version &#x60;1&#x60;).
         * @param {IfExists} [ifExists] Set this option to instruct the server on what to do if the artifact already exists.
         * @param {boolean} [canonical] Used only when the &#x60;ifExists&#x60; query parameter is set to &#x60;RETURN_OR_UPDATE&#x60;, this parameter can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
         * @param {string} [xRegistryDescription] Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryDescriptionEncoded] Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryName] Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryNameEncoded] Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryContentHash] Specifies the (optional) hash of the artifact to be verified.
         * @param {'SHA256' | 'MD5'} [xRegistryHashAlgorithm] The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
         * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Delete artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact(groupId, artifactId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteArtifact(groupId, artifactId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes all of the artifacts that exist in a given group.
         * @summary Delete artifacts in group
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactsInGroup(groupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteArtifactsInGroup(groupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact by global ID
         * @param {number} globalId Global identifier for an artifact version.
         * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByGlobalId(globalId, dereference, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getContentByGlobalId(globalId, dereference, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact content by SHA-256 hash
         * @param {string} contentHash SHA-256 content hash for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByHash(contentHash, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getContentByHash(contentHash, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact content by ID
         * @param {number} contentId Global identifier for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById(contentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getContentById(contentId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`). If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get latest artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestArtifact(groupId, artifactId, dereference, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLatestArtifact(groupId, artifactId, dereference, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list of all artifacts in the group.  This list is paged.
         * @summary List artifacts in group
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {number} [limit] The number of artifacts to return.  Defaults to 20.
         * @param {number} [offset] The number of artifacts to skip before starting the result set.  Defaults to 0.
         * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
         * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactsInGroup(groupId, limit, offset, order, orderby, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listArtifactsInGroup(groupId, limit, offset, order, orderby, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list containing all the artifact references using the artifact content hash.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by hash
         * @param {string} contentHash SHA-256 content hash for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByContentHash(contentHash, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.referencesByContentHash(contentHash, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list containing all the artifact references using the artifact content ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by content ID
         * @param {number} contentId Global identifier for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByContentId(contentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.referencesByContentId(contentId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns a list containing all the artifact references using the artifact global ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by global ID
         * @param {number} globalId Global identifier for an artifact version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByGlobalId(globalId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.referencesByGlobalId(globalId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates an artifact by uploading new content.  The body of the request can be the raw content of the artifact or a JSON object containing both the raw content and a set of references to other artifacts..  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact\'s type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
         * @summary Update artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {any} body The new content of the artifact being updated. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryVersion] Specifies the version number of this new version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically.
         * @param {string} [xRegistryName] Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryNameEncoded] Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryDescription] Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryDescriptionEncoded] Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`. The operation changes the state of the latest version of the artifact, even if this version is `DISABLED`. If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update artifact state
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {UpdateState} updateState
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactState(groupId, artifactId, updateState, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateArtifactState(groupId, artifactId, updateState, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ArtifactsApiFp = ArtifactsApiFp;
/**
 * ArtifactsApi - factory interface
 * @export
 */
const ArtifactsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ArtifactsApiFp)(configuration);
    return {
        /**
         * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request\'s `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`)
         * @summary Create artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {any} body The content of the artifact being created. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryArtifactType] Specifies the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryArtifactId] A client-provided, globally unique identifier for the new artifact.
         * @param {string} [xRegistryVersion] Specifies the version number of this initial version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically (starting with version &#x60;1&#x60;).
         * @param {IfExists} [ifExists] Set this option to instruct the server on what to do if the artifact already exists.
         * @param {boolean} [canonical] Used only when the &#x60;ifExists&#x60; query parameter is set to &#x60;RETURN_OR_UPDATE&#x60;, this parameter can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
         * @param {string} [xRegistryDescription] Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryDescriptionEncoded] Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryName] Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryNameEncoded] Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryContentHash] Specifies the (optional) hash of the artifact to be verified.
         * @param {'SHA256' | 'MD5'} [xRegistryHashAlgorithm] The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
         * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options) {
            return localVarFp.createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Delete artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact(groupId, artifactId, options) {
            return localVarFp.deleteArtifact(groupId, artifactId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all of the artifacts that exist in a given group.
         * @summary Delete artifacts in group
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifactsInGroup(groupId, options) {
            return localVarFp.deleteArtifactsInGroup(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact by global ID
         * @param {number} globalId Global identifier for an artifact version.
         * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByGlobalId(globalId, dereference, options) {
            return localVarFp.getContentByGlobalId(globalId, dereference, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact content by SHA-256 hash
         * @param {string} contentHash SHA-256 content hash for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentByHash(contentHash, options) {
            return localVarFp.getContentByHash(contentHash, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get artifact content by ID
         * @param {number} contentId Global identifier for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentById(contentId, options) {
            return localVarFp.getContentById(contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`). If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Get latest artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestArtifact(groupId, artifactId, dereference, options) {
            return localVarFp.getLatestArtifact(groupId, artifactId, dereference, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all artifacts in the group.  This list is paged.
         * @summary List artifacts in group
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {number} [limit] The number of artifacts to return.  Defaults to 20.
         * @param {number} [offset] The number of artifacts to skip before starting the result set.  Defaults to 0.
         * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
         * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArtifactsInGroup(groupId, limit, offset, order, orderby, options) {
            return localVarFp.listArtifactsInGroup(groupId, limit, offset, order, orderby, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list containing all the artifact references using the artifact content hash.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by hash
         * @param {string} contentHash SHA-256 content hash for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByContentHash(contentHash, options) {
            return localVarFp.referencesByContentHash(contentHash, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list containing all the artifact references using the artifact content ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by content ID
         * @param {number} contentId Global identifier for a single artifact content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByContentId(contentId, options) {
            return localVarFp.referencesByContentId(contentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list containing all the artifact references using the artifact global ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
         * @summary List artifact references by global ID
         * @param {number} globalId Global identifier for an artifact version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referencesByGlobalId(globalId, options) {
            return localVarFp.referencesByGlobalId(globalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an artifact by uploading new content.  The body of the request can be the raw content of the artifact or a JSON object containing both the raw content and a set of references to other artifacts..  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact\'s type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
         * @summary Update artifact
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {any} body The new content of the artifact being updated. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
         * @param {string} [xRegistryVersion] Specifies the version number of this new version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically.
         * @param {string} [xRegistryName] Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryNameEncoded] Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
         * @param {string} [xRegistryDescription] Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [xRegistryDescriptionEncoded] Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
         * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options) {
            return localVarFp.updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`. The operation changes the state of the latest version of the artifact, even if this version is `DISABLED`. If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
         * @summary Update artifact state
         * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
         * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
         * @param {UpdateState} updateState
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactState(groupId, artifactId, updateState, options) {
            return localVarFp.updateArtifactState(groupId, artifactId, updateState, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ArtifactsApiFactory = ArtifactsApiFactory;
/**
 * ArtifactsApi - object-oriented interface
 * @export
 * @class ArtifactsApi
 * @extends {BaseAPI}
 */
class ArtifactsApi extends base_1.BaseAPI {
    /**
     * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request\'s `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`)
     * @summary Create artifact
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {any} body The content of the artifact being created. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
     * @param {string} [xRegistryArtifactType] Specifies the type of the artifact being added. Possible values include:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
     * @param {string} [xRegistryArtifactId] A client-provided, globally unique identifier for the new artifact.
     * @param {string} [xRegistryVersion] Specifies the version number of this initial version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically (starting with version &#x60;1&#x60;).
     * @param {IfExists} [ifExists] Set this option to instruct the server on what to do if the artifact already exists.
     * @param {boolean} [canonical] Used only when the &#x60;ifExists&#x60; query parameter is set to &#x60;RETURN_OR_UPDATE&#x60;, this parameter can be set to &#x60;true&#x60; to indicate that the server should \&quot;canonicalize\&quot; the content when searching for a matching version.  The canonicalization algorithm is unique to each artifact type, but typically involves removing extra whitespace and formatting the content in a consistent manner.
     * @param {string} [xRegistryDescription] Specifies the description of artifact being added. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
     * @param {string} [xRegistryDescriptionEncoded] Specifies the description of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
     * @param {string} [xRegistryName] Specifies the name of artifact being added. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
     * @param {string} [xRegistryNameEncoded] Specifies the name of artifact being added. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
     * @param {string} [xRegistryContentHash] Specifies the (optional) hash of the artifact to be verified.
     * @param {'SHA256' | 'MD5'} [xRegistryHashAlgorithm] The algorithm to use when checking the content validity. (available: SHA256, MD5; default: SHA256)
     * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).createArtifact(groupId, body, xRegistryArtifactType, xRegistryArtifactId, xRegistryVersion, ifExists, canonical, xRegistryDescription, xRegistryDescriptionEncoded, xRegistryName, xRegistryNameEncoded, xRegistryContentHash, xRegistryHashAlgorithm, contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Delete artifact
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    deleteArtifact(groupId, artifactId, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).deleteArtifact(groupId, artifactId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes all of the artifacts that exist in a given group.
     * @summary Delete artifacts in group
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    deleteArtifactsInGroup(groupId, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).deleteArtifactsInGroup(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get artifact by global ID
     * @param {number} globalId Global identifier for an artifact version.
     * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    getContentByGlobalId(globalId, dereference, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).getContentByGlobalId(globalId, dereference, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get artifact content by SHA-256 hash
     * @param {string} contentHash SHA-256 content hash for a single artifact content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    getContentByHash(contentHash, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).getContentByHash(contentHash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get artifact content by ID
     * @param {number} contentId Global identifier for a single artifact content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    getContentById(contentId, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).getContentById(contentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`). If the latest version of the artifact is marked as `DISABLED`, the next available non-disabled version will be used.  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists or all versions are `DISABLED` (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Get latest artifact
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {boolean} [dereference] Allows the user to specify if the content should be dereferenced when being returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    getLatestArtifact(groupId, artifactId, dereference, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).getLatestArtifact(groupId, artifactId, dereference, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all artifacts in the group.  This list is paged.
     * @summary List artifacts in group
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {number} [limit] The number of artifacts to return.  Defaults to 20.
     * @param {number} [offset] The number of artifacts to skip before starting the result set.  Defaults to 0.
     * @param {SortOrder} [order] Sort order, ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
     * @param {SortBy} [orderby] The field to sort by.  Can be one of:  * &#x60;name&#x60; * &#x60;createdOn&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    listArtifactsInGroup(groupId, limit, offset, order, orderby, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).listArtifactsInGroup(groupId, limit, offset, order, orderby, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list containing all the artifact references using the artifact content hash.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact references by hash
     * @param {string} contentHash SHA-256 content hash for a single artifact content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    referencesByContentHash(contentHash, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).referencesByContentHash(contentHash, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list containing all the artifact references using the artifact content ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact references by content ID
     * @param {number} contentId Global identifier for a single artifact content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    referencesByContentId(contentId, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).referencesByContentId(contentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list containing all the artifact references using the artifact global ID.  This operation may fail for one of the following reasons:  * A server error occurred (HTTP error `500`)
     * @summary List artifact references by global ID
     * @param {number} globalId Global identifier for an artifact version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    referencesByGlobalId(globalId, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).referencesByGlobalId(globalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an artifact by uploading new content.  The body of the request can be the raw content of the artifact or a JSON object containing both the raw content and a set of references to other artifacts..  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact\'s type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
     * @summary Update artifact
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {any} body The new content of the artifact being updated. This is often, but not always, JSON data representing one of the supported artifact types:  * Avro (&#x60;AVRO&#x60;) * Protobuf (&#x60;PROTOBUF&#x60;) * JSON Schema (&#x60;JSON&#x60;) * Kafka Connect (&#x60;KCONNECT&#x60;) * OpenAPI (&#x60;OPENAPI&#x60;) * AsyncAPI (&#x60;ASYNCAPI&#x60;) * GraphQL (&#x60;GRAPHQL&#x60;) * Web Services Description Language (&#x60;WSDL&#x60;) * XML Schema (&#x60;XSD&#x60;)
     * @param {string} [xRegistryVersion] Specifies the version number of this new version of the artifact content.  This would typically be a simple integer or a SemVer value.  If not provided, the server will assign a version number automatically.
     * @param {string} [xRegistryName] Specifies the artifact name of this new version of the artifact content. Name must be ASCII-only string. If this is not provided, the server will extract the name from the artifact content.
     * @param {string} [xRegistryNameEncoded] Specifies the artifact name of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the name from the artifact content.
     * @param {string} [xRegistryDescription] Specifies the artifact description of this new version of the artifact content. Description must be ASCII-only string. If this is not provided, the server will extract the description from the artifact content.
     * @param {string} [xRegistryDescriptionEncoded] Specifies the artifact description of this new version of the artifact content. Value of this must be Base64 encoded string. If this is not provided, the server will extract the description from the artifact content.
     * @param {string} [contentType] This header is explicit so clients using the OpenAPI Generator are able select the content type. Ignore otherwise.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).updateArtifact(groupId, artifactId, body, xRegistryVersion, xRegistryName, xRegistryNameEncoded, xRegistryDescription, xRegistryDescriptionEncoded, contentType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`. The operation changes the state of the latest version of the artifact, even if this version is `DISABLED`. If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * @summary Update artifact state
     * @param {string} groupId The artifact group ID.  Must be a string provided by the client, representing the name of the grouping of artifacts.
     * @param {string} artifactId The artifact ID.  Can be a string (client-provided) or UUID (server-generated), representing the unique artifact identifier.
     * @param {UpdateState} updateState
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    updateArtifactState(groupId, artifactId, updateState, options) {
        return (0, exports.ArtifactsApiFp)(this.configuration).updateArtifactState(groupId, artifactId, updateState, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ArtifactsApi = ArtifactsApi;
