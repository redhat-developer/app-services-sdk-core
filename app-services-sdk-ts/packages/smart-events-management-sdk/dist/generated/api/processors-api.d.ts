/**
 * Red Hat Openshift SmartEvents Fleet Manager V2
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ManagedResourceStatus } from '../model';
import { ProcessorListResponse } from '../model';
import { ProcessorRequest } from '../model';
import { ProcessorResponse } from '../model';
/**
 * ProcessorsApi - axios parameter creator
 * @export
 */
export declare const ProcessorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProcessor: (bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProcessor: (bridgeId: string, processorId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessor: (bridgeId: string, processorId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessors: (bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Processor instance for the authenticated user.
     * @summary Update a Processor instance.
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProcessor: (bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProcessorsApi - functional programming interface
 * @export
 */
export declare const ProcessorsApiFp: (configuration?: Configuration) => {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProcessor(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>>;
    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>>;
    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorListResponse>>;
    /**
     * Update a Processor instance for the authenticated user.
     * @summary Update a Processor instance.
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessorResponse>>;
};
/**
 * ProcessorsApi - factory interface
 * @export
 */
export declare const ProcessorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProcessor(bridgeId: string, processorRequest?: ProcessorRequest, options?: any): AxiosPromise<ProcessorResponse>;
    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProcessor(bridgeId: string, processorId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessor(bridgeId: string, processorId: string, options?: any): AxiosPromise<ProcessorResponse>;
    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: any): AxiosPromise<ProcessorListResponse>;
    /**
     * Update a Processor instance for the authenticated user.
     * @summary Update a Processor instance.
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: any): AxiosPromise<ProcessorResponse>;
};
/**
 * ProcessorsApi - interface
 * @export
 * @interface ProcessorsApi
 */
export interface ProcessorsApiInterface {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    createProcessor(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;
    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;
    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    getProcessors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): AxiosPromise<ProcessorListResponse>;
    /**
     * Update a Processor instance for the authenticated user.
     * @summary Update a Processor instance.
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApiInterface
     */
    updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): AxiosPromise<ProcessorResponse>;
}
/**
 * ProcessorsApi - object-oriented interface
 * @export
 * @class ProcessorsApi
 * @extends {BaseAPI}
 */
export declare class ProcessorsApi extends BaseAPI implements ProcessorsApiInterface {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    createProcessor(bridgeId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessorResponse, any>>;
    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    deleteProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    getProcessor(bridgeId: string, processorId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessorResponse, any>>;
    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    getProcessors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessorListResponse, any>>;
    /**
     * Update a Processor instance for the authenticated user.
     * @summary Update a Processor instance.
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    updateProcessor(bridgeId: string, processorId: string, processorRequest?: ProcessorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessorResponse, any>>;
}
