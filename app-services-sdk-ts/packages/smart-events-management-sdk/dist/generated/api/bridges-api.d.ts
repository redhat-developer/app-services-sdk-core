/**
 * Red Hat Openshift SmartEvents Fleet Manager V2
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BridgeListResponse } from '../model';
import { BridgeRequest } from '../model';
import { BridgeResponse } from '../model';
import { ManagedResourceStatus } from '../model';
/**
 * BridgesApi - axios parameter creator
 * @export
 */
export declare const BridgesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Bridge instance for the authenticated user.
     * @summary Create a Bridge instance
     * @param {BridgeRequest} [bridgeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBridge: (bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a Bridge instance of the authenticated user by ID.
     * @summary Delete a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBridge: (bridgeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Bridge instance of the authenticated user by ID.
     * @summary Get a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridge: (bridgeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of Bridge instances for the authenticated user.
     * @summary Get the list of Bridge instances
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridges: (name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BridgesApi - functional programming interface
 * @export
 */
export declare const BridgesApiFp: (configuration?: Configuration) => {
    /**
     * Create a Bridge instance for the authenticated user.
     * @summary Create a Bridge instance
     * @param {BridgeRequest} [bridgeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBridge(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BridgeResponse>>;
    /**
     * Delete a Bridge instance of the authenticated user by ID.
     * @summary Delete a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBridge(bridgeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a Bridge instance of the authenticated user by ID.
     * @summary Get a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridge(bridgeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BridgeResponse>>;
    /**
     * Get the list of Bridge instances for the authenticated user.
     * @summary Get the list of Bridge instances
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridges(name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BridgeListResponse>>;
};
/**
 * BridgesApi - factory interface
 * @export
 */
export declare const BridgesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Bridge instance for the authenticated user.
     * @summary Create a Bridge instance
     * @param {BridgeRequest} [bridgeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBridge(bridgeRequest?: BridgeRequest, options?: any): AxiosPromise<BridgeResponse>;
    /**
     * Delete a Bridge instance of the authenticated user by ID.
     * @summary Delete a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBridge(bridgeId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a Bridge instance of the authenticated user by ID.
     * @summary Get a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridge(bridgeId: string, options?: any): AxiosPromise<BridgeResponse>;
    /**
     * Get the list of Bridge instances for the authenticated user.
     * @summary Get the list of Bridge instances
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBridges(name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: any): AxiosPromise<BridgeListResponse>;
};
/**
 * BridgesApi - interface
 * @export
 * @interface BridgesApi
 */
export interface BridgesApiInterface {
    /**
     * Create a Bridge instance for the authenticated user.
     * @summary Create a Bridge instance
     * @param {BridgeRequest} [bridgeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApiInterface
     */
    createBridge(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): AxiosPromise<BridgeResponse>;
    /**
     * Delete a Bridge instance of the authenticated user by ID.
     * @summary Delete a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApiInterface
     */
    deleteBridge(bridgeId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a Bridge instance of the authenticated user by ID.
     * @summary Get a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApiInterface
     */
    getBridge(bridgeId: string, options?: AxiosRequestConfig): AxiosPromise<BridgeResponse>;
    /**
     * Get the list of Bridge instances for the authenticated user.
     * @summary Get the list of Bridge instances
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApiInterface
     */
    getBridges(name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): AxiosPromise<BridgeListResponse>;
}
/**
 * BridgesApi - object-oriented interface
 * @export
 * @class BridgesApi
 * @extends {BaseAPI}
 */
export declare class BridgesApi extends BaseAPI implements BridgesApiInterface {
    /**
     * Create a Bridge instance for the authenticated user.
     * @summary Create a Bridge instance
     * @param {BridgeRequest} [bridgeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApi
     */
    createBridge(bridgeRequest?: BridgeRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BridgeResponse, any>>;
    /**
     * Delete a Bridge instance of the authenticated user by ID.
     * @summary Delete a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApi
     */
    deleteBridge(bridgeId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a Bridge instance of the authenticated user by ID.
     * @summary Get a Bridge instance
     * @param {string} bridgeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApi
     */
    getBridge(bridgeId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BridgeResponse, any>>;
    /**
     * Get the list of Bridge instances for the authenticated user.
     * @summary Get the list of Bridge instances
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BridgesApi
     */
    getBridges(name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BridgeListResponse, any>>;
}
