"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Red Hat Openshift SmartEvents Fleet Manager V2
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessorsApi = exports.ProcessorsApiFactory = exports.ProcessorsApiFp = exports.ProcessorsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ProcessorsApi - axios parameter creator
 * @export
 */
const ProcessorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a Processor of a Bridge instance for the authenticated user.
         * @summary Create a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {ProcessorRequest} [processorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessor: (bridgeId, processorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('createProcessor', 'bridgeId', bridgeId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/processors`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(processorRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a Processor of a Bridge instance for the authenticated user.
         * @summary Delete a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessor: (bridgeId, processorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('deleteProcessor', 'bridgeId', bridgeId);
            // verify required parameter 'processorId' is not null or undefined
            (0, common_1.assertParamExists)('deleteProcessor', 'processorId', processorId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/processors/{processorId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"processorId"}}`, encodeURIComponent(String(processorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a Processor of a Bridge instance for the authenticated user.
         * @summary Get a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessor: (bridgeId, processorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessor', 'bridgeId', bridgeId);
            // verify required parameter 'processorId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessor', 'processorId', processorId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/processors/{processorId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"processorId"}}`, encodeURIComponent(String(processorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the list of Processors of a Bridge instance for the authenticated user.
         * @summary Get the list of Processors of a Bridge instance
         * @param {string} bridgeId
         * @param {string} [name]
         * @param {number} [page]
         * @param {number} [size]
         * @param {Set<ManagedResourceStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessors: (bridgeId, name, page, size, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessors', 'bridgeId', bridgeId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/processors`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update a Processor instance for the authenticated user.
         * @summary Update a Processor instance.
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {ProcessorRequest} [processorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessor: (bridgeId, processorId, processorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bridgeId' is not null or undefined
            (0, common_1.assertParamExists)('updateProcessor', 'bridgeId', bridgeId);
            // verify required parameter 'processorId' is not null or undefined
            (0, common_1.assertParamExists)('updateProcessor', 'processorId', processorId);
            const localVarPath = `/api/smartevents_mgmt/v2/bridges/{bridgeId}/processors/{processorId}`
                .replace(`{${"bridgeId"}}`, encodeURIComponent(String(bridgeId)))
                .replace(`{${"processorId"}}`, encodeURIComponent(String(processorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(processorRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ProcessorsApiAxiosParamCreator = ProcessorsApiAxiosParamCreator;
/**
 * ProcessorsApi - functional programming interface
 * @export
 */
const ProcessorsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ProcessorsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a Processor of a Bridge instance for the authenticated user.
         * @summary Create a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {ProcessorRequest} [processorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessor(bridgeId, processorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProcessor(bridgeId, processorRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Delete a Processor of a Bridge instance for the authenticated user.
         * @summary Delete a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessor(bridgeId, processorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProcessor(bridgeId, processorId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get a Processor of a Bridge instance for the authenticated user.
         * @summary Get a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessor(bridgeId, processorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcessor(bridgeId, processorId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the list of Processors of a Bridge instance for the authenticated user.
         * @summary Get the list of Processors of a Bridge instance
         * @param {string} bridgeId
         * @param {string} [name]
         * @param {number} [page]
         * @param {number} [size]
         * @param {Set<ManagedResourceStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessors(bridgeId, name, page, size, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProcessors(bridgeId, name, page, size, status, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Update a Processor instance for the authenticated user.
         * @summary Update a Processor instance.
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {ProcessorRequest} [processorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessor(bridgeId, processorId, processorRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateProcessor(bridgeId, processorId, processorRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ProcessorsApiFp = ProcessorsApiFp;
/**
 * ProcessorsApi - factory interface
 * @export
 */
const ProcessorsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ProcessorsApiFp)(configuration);
    return {
        /**
         * Create a Processor of a Bridge instance for the authenticated user.
         * @summary Create a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {ProcessorRequest} [processorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessor(bridgeId, processorRequest, options) {
            return localVarFp.createProcessor(bridgeId, processorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Processor of a Bridge instance for the authenticated user.
         * @summary Delete a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessor(bridgeId, processorId, options) {
            return localVarFp.deleteProcessor(bridgeId, processorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Processor of a Bridge instance for the authenticated user.
         * @summary Get a Processor of a Bridge instance
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessor(bridgeId, processorId, options) {
            return localVarFp.getProcessor(bridgeId, processorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of Processors of a Bridge instance for the authenticated user.
         * @summary Get the list of Processors of a Bridge instance
         * @param {string} bridgeId
         * @param {string} [name]
         * @param {number} [page]
         * @param {number} [size]
         * @param {Set<ManagedResourceStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessors(bridgeId, name, page, size, status, options) {
            return localVarFp.getProcessors(bridgeId, name, page, size, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Processor instance for the authenticated user.
         * @summary Update a Processor instance.
         * @param {string} bridgeId
         * @param {string} processorId
         * @param {ProcessorRequest} [processorRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessor(bridgeId, processorId, processorRequest, options) {
            return localVarFp.updateProcessor(bridgeId, processorId, processorRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ProcessorsApiFactory = ProcessorsApiFactory;
/**
 * ProcessorsApi - object-oriented interface
 * @export
 * @class ProcessorsApi
 * @extends {BaseAPI}
 */
class ProcessorsApi extends base_1.BaseAPI {
    /**
     * Create a Processor of a Bridge instance for the authenticated user.
     * @summary Create a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    createProcessor(bridgeId, processorRequest, options) {
        return (0, exports.ProcessorsApiFp)(this.configuration).createProcessor(bridgeId, processorRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a Processor of a Bridge instance for the authenticated user.
     * @summary Delete a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    deleteProcessor(bridgeId, processorId, options) {
        return (0, exports.ProcessorsApiFp)(this.configuration).deleteProcessor(bridgeId, processorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a Processor of a Bridge instance for the authenticated user.
     * @summary Get a Processor of a Bridge instance
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    getProcessor(bridgeId, processorId, options) {
        return (0, exports.ProcessorsApiFp)(this.configuration).getProcessor(bridgeId, processorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of Processors of a Bridge instance for the authenticated user.
     * @summary Get the list of Processors of a Bridge instance
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    getProcessors(bridgeId, name, page, size, status, options) {
        return (0, exports.ProcessorsApiFp)(this.configuration).getProcessors(bridgeId, name, page, size, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a Processor instance for the authenticated user.
     * @summary Update a Processor instance.
     * @param {string} bridgeId
     * @param {string} processorId
     * @param {ProcessorRequest} [processorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessorsApi
     */
    updateProcessor(bridgeId, processorId, processorRequest, options) {
        return (0, exports.ProcessorsApiFp)(this.configuration).updateProcessor(bridgeId, processorId, processorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProcessorsApi = ProcessorsApi;
