/**
 * Red Hat Openshift SmartEvents Fleet Manager V2
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ConnectorRequest } from '../model';
import { ManagedResourceStatus } from '../model';
import { SourceConnectorListResponse } from '../model';
import { SourceConnectorResponse } from '../model';
/**
 * SourceConnectorsApi - axios parameter creator
 * @export
 */
export declare const SourceConnectorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Source Connector of a Bridge instance for the authenticated user.
     * @summary Create a Source Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSourceConnector: (bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a Source Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceConnector: (bridgeId: string, sourceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Source Connector of a Bridge instance for the authenticated user.
     * @summary Get a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnector: (bridgeId: string, sourceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of Source Connector instances of a Bridge instance instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnectors: (bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a Source Connector instance for the authenticated user.
     * @summary Update a Source Connector instance.
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceConnector: (bridgeId: string, sourceId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SourceConnectorsApi - functional programming interface
 * @export
 */
export declare const SourceConnectorsApiFp: (configuration?: Configuration) => {
    /**
     * Create a Source Connector of a Bridge instance for the authenticated user.
     * @summary Create a Source Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSourceConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceConnectorResponse>>;
    /**
     * Delete a Source Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceConnector(bridgeId: string, sourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a Source Connector of a Bridge instance for the authenticated user.
     * @summary Get a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnector(bridgeId: string, sourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceConnectorResponse>>;
    /**
     * Get the list of Source Connector instances of a Bridge instance instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceConnectorListResponse>>;
    /**
     * Update a Source Connector instance for the authenticated user.
     * @summary Update a Source Connector instance.
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceConnector(bridgeId: string, sourceId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceConnectorResponse>>;
};
/**
 * SourceConnectorsApi - factory interface
 * @export
 */
export declare const SourceConnectorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Source Connector of a Bridge instance for the authenticated user.
     * @summary Create a Source Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSourceConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: any): AxiosPromise<SourceConnectorResponse>;
    /**
     * Delete a Source Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceConnector(bridgeId: string, sourceId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a Source Connector of a Bridge instance for the authenticated user.
     * @summary Get a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnector(bridgeId: string, sourceId: string, options?: any): AxiosPromise<SourceConnectorResponse>;
    /**
     * Get the list of Source Connector instances of a Bridge instance instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: any): AxiosPromise<SourceConnectorListResponse>;
    /**
     * Update a Source Connector instance for the authenticated user.
     * @summary Update a Source Connector instance.
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceConnector(bridgeId: string, sourceId: string, connectorRequest?: ConnectorRequest, options?: any): AxiosPromise<SourceConnectorResponse>;
};
/**
 * SourceConnectorsApi - interface
 * @export
 * @interface SourceConnectorsApi
 */
export interface SourceConnectorsApiInterface {
    /**
     * Create a Source Connector of a Bridge instance for the authenticated user.
     * @summary Create a Source Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApiInterface
     */
    createSourceConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): AxiosPromise<SourceConnectorResponse>;
    /**
     * Delete a Source Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApiInterface
     */
    deleteSourceConnector(bridgeId: string, sourceId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a Source Connector of a Bridge instance for the authenticated user.
     * @summary Get a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApiInterface
     */
    getSourceConnector(bridgeId: string, sourceId: string, options?: AxiosRequestConfig): AxiosPromise<SourceConnectorResponse>;
    /**
     * Get the list of Source Connector instances of a Bridge instance instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApiInterface
     */
    getSourceConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): AxiosPromise<SourceConnectorListResponse>;
    /**
     * Update a Source Connector instance for the authenticated user.
     * @summary Update a Source Connector instance.
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApiInterface
     */
    updateSourceConnector(bridgeId: string, sourceId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): AxiosPromise<SourceConnectorResponse>;
}
/**
 * SourceConnectorsApi - object-oriented interface
 * @export
 * @class SourceConnectorsApi
 * @extends {BaseAPI}
 */
export declare class SourceConnectorsApi extends BaseAPI implements SourceConnectorsApiInterface {
    /**
     * Create a Source Connector of a Bridge instance for the authenticated user.
     * @summary Create a Source Connector for a Bridge instance
     * @param {string} bridgeId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApi
     */
    createSourceConnector(bridgeId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceConnectorResponse, any>>;
    /**
     * Delete a Source Connector of a Bridge instance for the authenticated user.
     * @summary Delete a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApi
     */
    deleteSourceConnector(bridgeId: string, sourceId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a Source Connector of a Bridge instance for the authenticated user.
     * @summary Get a Source Connector of a Bridge instance
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApi
     */
    getSourceConnector(bridgeId: string, sourceId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceConnectorResponse, any>>;
    /**
     * Get the list of Source Connector instances of a Bridge instance instance for the authenticated user.
     * @summary Get the list of Sink Connectors for a Bridge
     * @param {string} bridgeId
     * @param {string} [name]
     * @param {number} [page]
     * @param {number} [size]
     * @param {Set<ManagedResourceStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApi
     */
    getSourceConnectors(bridgeId: string, name?: string, page?: number, size?: number, status?: Set<ManagedResourceStatus>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceConnectorListResponse, any>>;
    /**
     * Update a Source Connector instance for the authenticated user.
     * @summary Update a Source Connector instance.
     * @param {string} bridgeId
     * @param {string} sourceId
     * @param {ConnectorRequest} [connectorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceConnectorsApi
     */
    updateSourceConnector(bridgeId: string, sourceId: string, connectorRequest?: ConnectorRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceConnectorResponse, any>>;
}
