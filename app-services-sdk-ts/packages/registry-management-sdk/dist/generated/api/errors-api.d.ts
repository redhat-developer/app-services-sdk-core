/**
 * Service Registry Management API
 * Service Registry Management API is a REST API for managing Service Registry instances. Service Registry is a datastore for event schemas and API designs, which is based on the open source Apicurio Registry project.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: rhosak-eval-support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ErrorList } from '../model';
/**
 * ErrorsApi - axios parameter creator
 * @export
 */
export declare const ErrorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get information about a specific error type
     * @param {string} id The id of the object you wish to interact with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getError: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of all errors
     * @param {number} [page] Page index.
     * @param {number} [size] Number of items in each page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getErrors: (page?: number, size?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorsApi - functional programming interface
 * @export
 */
export declare const ErrorsApiFp: (configuration?: Configuration) => {
    /**
     * Get information about a specific error type
     * @param {string} id The id of the object you wish to interact with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getError(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>>;
    /**
     * Get the list of all errors
     * @param {number} [page] Page index.
     * @param {number} [size] Number of items in each page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getErrors(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>>;
};
/**
 * ErrorsApi - factory interface
 * @export
 */
export declare const ErrorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get information about a specific error type
     * @param {string} id The id of the object you wish to interact with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getError(id: string, options?: any): AxiosPromise<Error>;
    /**
     * Get the list of all errors
     * @param {number} [page] Page index.
     * @param {number} [size] Number of items in each page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getErrors(page?: number, size?: number, options?: any): AxiosPromise<ErrorList>;
};
/**
 * ErrorsApi - interface
 * @export
 * @interface ErrorsApi
 */
export interface ErrorsApiInterface {
    /**
     * Get information about a specific error type
     * @param {string} id The id of the object you wish to interact with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorsApiInterface
     */
    getError(id: string, options?: AxiosRequestConfig): AxiosPromise<Error>;
    /**
     * Get the list of all errors
     * @param {number} [page] Page index.
     * @param {number} [size] Number of items in each page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorsApiInterface
     */
    getErrors(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<ErrorList>;
}
/**
 * ErrorsApi - object-oriented interface
 * @export
 * @class ErrorsApi
 * @extends {BaseAPI}
 */
export declare class ErrorsApi extends BaseAPI implements ErrorsApiInterface {
    /**
     * Get information about a specific error type
     * @param {string} id The id of the object you wish to interact with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorsApi
     */
    getError(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Error, any>>;
    /**
     * Get the list of all errors
     * @param {number} [page] Page index.
     * @param {number} [size] Number of items in each page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorsApi
     */
    getErrors(page?: number, size?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ErrorList, any>>;
}
