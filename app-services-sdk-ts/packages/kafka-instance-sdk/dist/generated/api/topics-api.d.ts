/**
 * Kafka Instance API
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * The version of the OpenAPI document: 0.14.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { NewTopicInput } from '../model';
import { SortDirection } from '../model';
import { Topic } from '../model';
import { TopicOrderKey } from '../model';
import { TopicSettings } from '../model';
import { TopicsList } from '../model';
/**
 * TopicsApi - axios parameter creator
 * @export
 */
export declare const TopicsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTopic: (newTopicInput: NewTopicInput, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a topic
     * @param {string} topicName Name of the topic to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTopic: (topicName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Topic
     * @summary Retrieves a single topic
     * @param {string} topicName Name of the topic to describe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic: (topicName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the request query parameters. The topics returned are limited to those records the requestor is authorized to view.
     * @summary Retrieves a list of topics
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [page] Page number
     * @param {SortDirection} [order] Order items are sorted
     * @param {TopicOrderKey} [orderKey] Order key to sort the topics by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopics: (offset?: number, limit?: number, size?: number, filter?: string, page?: number, order?: SortDirection, orderKey?: TopicOrderKey, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the configuration settings for a topic.
     * @summary Updates a single topic
     * @param {string} topicName Name of the topic to update
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTopic: (topicName: string, topicSettings: TopicSettings, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TopicsApi - functional programming interface
 * @export
 */
export declare const TopicsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTopic(newTopicInput: NewTopicInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>>;
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a topic
     * @param {string} topicName Name of the topic to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTopic(topicName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Topic
     * @summary Retrieves a single topic
     * @param {string} topicName Name of the topic to describe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic(topicName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>>;
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the request query parameters. The topics returned are limited to those records the requestor is authorized to view.
     * @summary Retrieves a list of topics
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [page] Page number
     * @param {SortDirection} [order] Order items are sorted
     * @param {TopicOrderKey} [orderKey] Order key to sort the topics by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopics(offset?: number, limit?: number, size?: number, filter?: string, page?: number, order?: SortDirection, orderKey?: TopicOrderKey, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsList>>;
    /**
     * Update the configuration settings for a topic.
     * @summary Updates a single topic
     * @param {string} topicName Name of the topic to update
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTopic(topicName: string, topicSettings: TopicSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>>;
};
/**
 * TopicsApi - factory interface
 * @export
 */
export declare const TopicsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTopic(newTopicInput: NewTopicInput, options?: any): AxiosPromise<Topic>;
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a topic
     * @param {string} topicName Name of the topic to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTopic(topicName: string, options?: any): AxiosPromise<void>;
    /**
     * Topic
     * @summary Retrieves a single topic
     * @param {string} topicName Name of the topic to describe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopic(topicName: string, options?: any): AxiosPromise<Topic>;
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the request query parameters. The topics returned are limited to those records the requestor is authorized to view.
     * @summary Retrieves a list of topics
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [page] Page number
     * @param {SortDirection} [order] Order items are sorted
     * @param {TopicOrderKey} [orderKey] Order key to sort the topics by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopics(offset?: number, limit?: number, size?: number, filter?: string, page?: number, order?: SortDirection, orderKey?: TopicOrderKey, options?: any): AxiosPromise<TopicsList>;
    /**
     * Update the configuration settings for a topic.
     * @summary Updates a single topic
     * @param {string} topicName Name of the topic to update
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTopic(topicName: string, topicSettings: TopicSettings, options?: any): AxiosPromise<Topic>;
};
/**
 * TopicsApi - interface
 * @export
 * @interface TopicsApi
 */
export interface TopicsApiInterface {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    createTopic(newTopicInput: NewTopicInput, options?: AxiosRequestConfig): AxiosPromise<Topic>;
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a topic
     * @param {string} topicName Name of the topic to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    deleteTopic(topicName: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Topic
     * @summary Retrieves a single topic
     * @param {string} topicName Name of the topic to describe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    getTopic(topicName: string, options?: AxiosRequestConfig): AxiosPromise<Topic>;
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the request query parameters. The topics returned are limited to those records the requestor is authorized to view.
     * @summary Retrieves a list of topics
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [page] Page number
     * @param {SortDirection} [order] Order items are sorted
     * @param {TopicOrderKey} [orderKey] Order key to sort the topics by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    getTopics(offset?: number, limit?: number, size?: number, filter?: string, page?: number, order?: SortDirection, orderKey?: TopicOrderKey, options?: AxiosRequestConfig): AxiosPromise<TopicsList>;
    /**
     * Update the configuration settings for a topic.
     * @summary Updates a single topic
     * @param {string} topicName Name of the topic to update
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    updateTopic(topicName: string, topicSettings: TopicSettings, options?: AxiosRequestConfig): AxiosPromise<Topic>;
}
/**
 * TopicsApi - object-oriented interface
 * @export
 * @class TopicsApi
 * @extends {BaseAPI}
 */
export declare class TopicsApi extends BaseAPI implements TopicsApiInterface {
    /**
     * Creates a new topic for Kafka.
     * @summary Creates a new topic
     * @param {NewTopicInput} newTopicInput Topic to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    createTopic(newTopicInput: NewTopicInput, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Topic, any>>;
    /**
     * Deletes the topic with the specified name.
     * @summary Deletes a topic
     * @param {string} topicName Name of the topic to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    deleteTopic(topicName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Topic
     * @summary Retrieves a single topic
     * @param {string} topicName Name of the topic to describe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    getTopic(topicName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Topic, any>>;
    /**
     * Returns a list of all of the available topics, or the list of topics that meet the request query parameters. The topics returned are limited to those records the requestor is authorized to view.
     * @summary Retrieves a list of topics
     * @param {number} [offset] Offset of the first record to return, zero-based
     * @param {number} [limit] Maximum number of records to return
     * @param {number} [size] Number of records per page
     * @param {string} [filter] Filter to apply when returning the list of topics
     * @param {number} [page] Page number
     * @param {SortDirection} [order] Order items are sorted
     * @param {TopicOrderKey} [orderKey] Order key to sort the topics by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    getTopics(offset?: number, limit?: number, size?: number, filter?: string, page?: number, order?: SortDirection, orderKey?: TopicOrderKey, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TopicsList, any>>;
    /**
     * Update the configuration settings for a topic.
     * @summary Updates a single topic
     * @param {string} topicName Name of the topic to update
     * @param {TopicSettings} topicSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApi
     */
    updateTopic(topicName: string, topicSettings: TopicSettings, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Topic, any>>;
}
